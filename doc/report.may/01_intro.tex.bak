\section{Introduction}
\label{sec:intro}

This document follows a previous work where \texttt{polu} application - which computes the evolution of a pollutant in a given environment - was studied in order to find possibilities of optimization and/or parallelization.

The original \texttt{polu} application works like a hearthbeat algorithm with no communication (since it is executed in a single computation node). The algorithm used by the application sees the environment as a discrete mesh (represented by its cells and edges) and loops until the specified time interval is reached. At each iteration of this main loop, the algorithm performs two main steps:

\begin{description}
	\item[Flux Computation] Based on current pollution values for each cell, the flux for each edge is calculated (performed by the \texttt{compute\_flux} function)
	\item[Polution Update] Using the previously calculated flux values, the pollution for each cell is updated (performed by the \texttt{update} function)
\end{description}

Several changes were performed in the original \texttt{polu} code in order to allow parallelization and/or improve performance. The most important of these optimizations involved changing the data structures (originally implementad as \textit{Arrays-of-Pointers}) to \textit{Arrays-of-Structures}. This change removed the excessive dereferencing caused by deep chains of pointers in the original structures, which effectively reduced data access time and improved locality.

The goal of this stage is to study attempt an implementation of the same application, using a distributed memory model with MPI, and analyse the scalability of the algorithm when testing with different amounts of processes and nodes.


\todo[inline]{Ate aqui esta copiado da intro do outro, com poucas altera√ßoes}