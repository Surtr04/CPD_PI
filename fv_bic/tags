!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BackwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitution(FVPoint2D<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitution(FVPoint3D<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitution(FVPoint4D<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitution(FVVect<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitutionPivoting(FVPoint2D<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitutionPivoting(FVPoint3D<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitutionPivoting(FVPoint4D<double> &u) $/;"	f	class:FVDenseM
BackwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::BackwardSubstitutionPivoting(FVVect<double> &u) $/;"	f	class:FVDenseM
BadBaliseFormat	include/FVLib_config.h	/^           BadBaliseFormat=0,$/;"	e	enum:BaliseCode
BaliseCode	include/FVLib_config.h	/^enum BaliseCode{$/;"	g
CELL	include/FVLib_config.h	/^           CELL       $/;"	e	enum:FVFile
CrossProduct	include/FVPoint3D.h	/^inline FVPoint3D<double> CrossProduct(const FVPoint3D<double> &u, const FVPoint3D<double> &v)$/;"	f
DIRS	src/Makefile	/^DIRS	:=	$(filter-out $(NO_DIRS), $(DIRS))$/;"	m
DIRS	src/Makefile	/^DIRS	=	$(shell find . -mindepth 1 -maxdepth 1 -type d)$/;"	m
Det	include/FVPoint2D.h	/^inline T_ Det(const FVPoint2D<T_> &u,const FVPoint2D<T_> &v)$/;"	f
Det	include/FVPoint3D.h	/^inline double Det(const FVPoint3D<double> &u, const FVPoint3D<double> &v, const FVPoint3D<double> &w)$/;"	f
EndXMLFile	include/FVLib_config.h	/^           EndXMLFile,$/;"	e	enum:BaliseCode
EntityCode	include/FVLib_config.h	/^enum EntityCode{$/;"	g
FVCELL1D	include/FVLib_config.h	/^           FVCELL1D,$/;"	e	enum:EntityCode
FVCELL2D	include/FVLib_config.h	/^           FVCELL2D,$/;"	e	enum:EntityCode
FVCELL3D	include/FVLib_config.h	/^           FVCELL3D,$/;"	e	enum:EntityCode
FVCHAMP	include/FVLib_config.h	10;"	d
FVCHAMPINT	include/FVLib_config.h	11;"	d
FVCell1D	include/FVCell1D.h	/^     FVCell1D(){firstVertex=NULL;secondVertex=NULL;label=0;_pos_v=0;}$/;"	f	class:FVCell1D
FVCell1D	include/FVCell1D.h	/^class FVCell1D$/;"	c
FVCell2D	include/FVCell2D.h	/^     FVCell2D(){nb_vertex=0;nb_edge=0;label=0;}$/;"	f	class:FVCell2D
FVCell2D	include/FVCell2D.h	/^class FVCell2D$/;"	c
FVCell3D	include/FVCell3D.h	/^     FVCell3D(){nb_vertex=0;nb_face=0;label=0;}$/;"	f	class:FVCell3D
FVCell3D	include/FVCell3D.h	/^class FVCell3D$/;"	c
FVDOUBLE_PRECISION	include/FVLib_config.h	8;"	d
FVDenseM	include/FVDenseM.h	/^FVDenseM<T_>::FVDenseM()$/;"	f	class:FVDenseM
FVDenseM	include/FVDenseM.h	/^FVDenseM<T_>::FVDenseM(const FVDenseM<T_> &m)$/;"	f	class:FVDenseM
FVDenseM	include/FVDenseM.h	/^FVDenseM<T_>::FVDenseM(size_t nr, size_t nc)$/;"	f	class:FVDenseM
FVDenseM	include/FVDenseM.h	/^FVDenseM<T_>::FVDenseM(size_t size)$/;"	f	class:FVDenseM
FVDenseM	include/FVDenseM.h	/^template<class T_> class FVDenseM : public valarray<T_>$/;"	c
FVEDGE2D	include/FVLib_config.h	/^           FVEDGE2D,$/;"	e	enum:EntityCode
FVEDGE3D	include/FVLib_config.h	/^           FVEDGE3D,$/;"	e	enum:EntityCode
FVENDFILE	include/FVLib_config.h	/^           FVENDFILE  ,$/;"	e	enum:FVFile
FVERROR	include/FVLib_config.h	/^           FVERROR    ,$/;"	e	enum:FVFile
FVEdge2D	include/FVEdge2D.h	/^     FVEdge2D(){leftCell=NULL;rightCell=NULL;firstVertex=NULL;secondVertex=NULL;label=0;}$/;"	f	class:FVEdge2D
FVEdge2D	include/FVEdge2D.h	/^class FVEdge2D$/;"	c
FVEdge3D	include/FVEdge3D.h	/^     FVEdge3D(){firstVertex=NULL;secondVertex=NULL;nb_vertex=0;label=0;}$/;"	f	class:FVEdge3D
FVEdge3D	include/FVEdge3D.h	/^class FVEdge3D$/;"	c
FVFACE3D	include/FVLib_config.h	/^           FVFACE3D$/;"	e	enum:EntityCode
FVFace3D	include/FVFace3D.h	/^     FVFace3D(){leftCell=NULL;rightCell=NULL;nb_vertex=0;nb_edge=0;nb_cell=0;label=0;}$/;"	f	class:FVFace3D
FVFace3D	include/FVFace3D.h	/^class FVFace3D$/;"	c
FVFile	include/FVLib_config.h	/^enum FVFile{$/;"	g
FVGaussPoint1D	include/FVGaussPoint.h	/^    FVGaussPoint1D(){ ; }$/;"	f	class:FVGaussPoint1D
FVGaussPoint1D	include/FVGaussPoint.h	/^class FVGaussPoint1D{$/;"	c
FVGaussPoint2D	include/FVGaussPoint.h	/^    FVGaussPoint2D() { ; }$/;"	f	class:FVGaussPoint2D
FVGaussPoint2D	include/FVGaussPoint.h	/^class FVGaussPoint2D{$/;"	c
FVGaussPoint3D	include/FVGaussPoint.h	/^    FVGaussPoint3D() { ; }$/;"	f	class:FVGaussPoint3D
FVGaussPoint3D	include/FVGaussPoint.h	/^class FVGaussPoint3D{$/;"	c
FVMesh1D	include/FVMesh1D.h	/^class FVMesh1D$/;"	c
FVMesh2D	include/FVMesh2D.h	/^class FVMesh2D$/;"	c
FVMesh3D	include/FVMesh3D.h	/^class FVMesh3D$/;"	c
FVNOFILE	include/FVLib_config.h	/^           FVNOFILE   ,$/;"	e	enum:FVFile
FVNULL	include/FVLib_config.h	/^           FVNULL     =  0,$/;"	e	enum:FVFile
FVOK	include/FVLib_config.h	/^           FVOK       ,$/;"	e	enum:FVFile
FVPRECISION	include/FVLib_config.h	9;"	d
FVPoint1D	include/FVPoint1D.h	/^    FVPoint1D() { x =  T_(0); }$/;"	f	class:FVPoint1D
FVPoint1D	include/FVPoint1D.h	/^    FVPoint1D(T_ a) { x = a; }$/;"	f	class:FVPoint1D
FVPoint1D	include/FVPoint1D.h	/^    FVPoint1D(const FVPoint1D<T_> &pt) { x = pt.x;  }$/;"	f	class:FVPoint1D
FVPoint1D	include/FVPoint1D.h	/^class FVPoint1D{$/;"	c
FVPoint2D	include/FVPoint2D.h	/^    FVPoint2D() { x = y =  T_(0); }$/;"	f	class:FVPoint2D
FVPoint2D	include/FVPoint2D.h	/^    FVPoint2D(T_ a, T_ b=T_(0)) { x = a; y = b; }$/;"	f	class:FVPoint2D
FVPoint2D	include/FVPoint2D.h	/^    FVPoint2D(const FVPoint2D<T_> &pt) { x = pt.x; y = pt.y;  }$/;"	f	class:FVPoint2D
FVPoint2D	include/FVPoint2D.h	/^class FVPoint2D{$/;"	c
FVPoint3D	include/FVPoint3D.h	/^    FVPoint3D() { x = y = z = T_(0); }$/;"	f	class:FVPoint3D
FVPoint3D	include/FVPoint3D.h	/^    FVPoint3D(T_ a, T_ b=T_(0), T_ c=T_(0)) { x = a; y = b; z = c; }$/;"	f	class:FVPoint3D
FVPoint3D	include/FVPoint3D.h	/^    FVPoint3D(const FVPoint3D<T_> &pt) { x = pt.x; y = pt.y; z = pt.z; }$/;"	f	class:FVPoint3D
FVPoint3D	include/FVPoint3D.h	/^class FVPoint3D{$/;"	c
FVPoint4D	include/FVPoint4D.h	/^    FVPoint4D() { x = y = z = t = T_(0); }$/;"	f	class:FVPoint4D
FVPoint4D	include/FVPoint4D.h	/^    FVPoint4D(T_ a, T_ b=T_(0), T_ c=T_(0),T_  d=T_(0)) { x = a; y = b; z = c; t = d;}$/;"	f	class:FVPoint4D
FVPoint4D	include/FVPoint4D.h	/^    FVPoint4D(const FVPoint4D<T_> &pt) { x = pt.x; y = pt.y; z = pt.z; t = pt.t; }$/;"	f	class:FVPoint4D
FVPoint4D	include/FVPoint4D.h	/^class FVPoint4D{$/;"	c
FVREAD	include/FVLib_config.h	/^           FVREAD     ,$/;"	e	enum:FVFile
FVRecons1D	include/FVRecons1D.h	/^FVRecons1D(){_ptr_s=NULL;_Vertex1DVect=NULL;_Cell1DVect=NULL;_A=NULL;_Q=NULL;_coef=NULL;_M=NULL;$/;"	f	class:FVRecons1D
FVRecons1D	include/FVRecons1D.h	/^FVRecons1D(FVStencil *ptr_s)$/;"	f	class:FVRecons1D
FVRecons1D	include/FVRecons1D.h	/^FVRecons1D(FVStencil *ptr_s, size_t degree)$/;"	f	class:FVRecons1D
FVRecons1D	include/FVRecons1D.h	/^class FVRecons1D$/;"	c
FVRecons2D	include/FVRecons2D.h	/^FVRecons2D(){_ptr_s=NULL;_Vertex2DVect=NULL;_Edge2DVect=NULL;_Cell2DVect=NULL;$/;"	f	class:FVRecons2D
FVRecons2D	include/FVRecons2D.h	/^FVRecons2D(FVStencil *ptr_s)$/;"	f	class:FVRecons2D
FVRecons2D	include/FVRecons2D.h	/^FVRecons2D(FVStencil *ptr_s, size_t degree)$/;"	f	class:FVRecons2D
FVRecons2D	include/FVRecons2D.h	/^class FVRecons2D$/;"	c
FVRecons3D	include/FVRecons3D.h	/^FVRecons3D(){_ptr_s=NULL;_Vertex3DVect=NULL;_Edge3DVect=NULL;_Face3DVect=NULL;_Cell3DVect=NULL;_A=NULL;_Q=NULL;$/;"	f	class:FVRecons3D
FVRecons3D	include/FVRecons3D.h	/^FVRecons3D(FVStencil *ptr_s)$/;"	f	class:FVRecons3D
FVRecons3D	include/FVRecons3D.h	/^FVRecons3D(FVStencil *ptr_s, size_t degree)$/;"	f	class:FVRecons3D
FVRecons3D	include/FVRecons3D.h	/^class FVRecons3D$/;"	c
FVSkylineM	include/FVSkylineM.h	/^template<class T_> class FVSkylineM : public valarray<T_>$/;"	c
FVSparseM	include/FVSparseM.h	/^FVSparseM<T_>::FVSparseM()$/;"	f	class:FVSparseM
FVSparseM	include/FVSparseM.h	/^FVSparseM<T_>::FVSparseM(const FVSparseM<T_> &m)$/;"	f	class:FVSparseM
FVSparseM	include/FVSparseM.h	/^FVSparseM<T_>::FVSparseM(size_t nr, size_t nc)$/;"	f	class:FVSparseM
FVSparseM	include/FVSparseM.h	/^FVSparseM<T_>::FVSparseM(size_t size)$/;"	f	class:FVSparseM
FVSparseM	include/FVSparseM.h	/^template<class T_> class FVSparseM $/;"	c
FVStencil	include/FVStencil.h	/^     FVStencil(){ $/;"	f	class:FVStencil
FVStencil	include/FVStencil.h	/^class FVStencil$/;"	c
FVVERTEX1D	include/FVLib_config.h	/^           FVVERTEX1D,$/;"	e	enum:EntityCode
FVVERTEX2D	include/FVLib_config.h	/^           FVVERTEX2D,$/;"	e	enum:EntityCode
FVVERTEX3D	include/FVLib_config.h	/^           FVVERTEX3D,$/;"	e	enum:EntityCode
FVVect	include/FVVect.h	/^FVVect<T_>::FVVect() : valarray<T_>(0){;}$/;"	f	class:FVVect
FVVect	include/FVVect.h	/^FVVect<T_>::FVVect(const  size_t n) : valarray<T_>(n){;}$/;"	f	class:FVVect
FVVect	include/FVVect.h	/^FVVect<T_>::FVVect(const FVVect<T_>& v) : valarray<T_>(v){;}$/;"	f	class:FVVect
FVVect	include/FVVect.h	/^template<class T_>  class FVVect : public valarray<T_>$/;"	c
FVVertex1D	include/FVVertex1D.h	/^     FVVertex1D(){leftCell=NULL;rightCell=NULL;label=0;coord=0;normal=0;}$/;"	f	class:FVVertex1D
FVVertex1D	include/FVVertex1D.h	/^class FVVertex1D$/;"	c
FVVertex2D	include/FVVertex2D.h	/^     FVVertex2D(){label=0;nb_cell=0;}$/;"	f	class:FVVertex2D
FVVertex2D	include/FVVertex2D.h	/^class FVVertex2D$/;"	c
FVVertex3D	include/FVVertex3D.h	/^     FVVertex3D(){label=0;nb_cell=0;}$/;"	f	class:FVVertex3D
FVVertex3D	include/FVVertex3D.h	/^class FVVertex3D$/;"	c
FVWRITE	include/FVLib_config.h	/^           FVWRITE    ,$/;"	e	enum:FVFile
FVWRONGDIM	include/FVLib_config.h	/^           FVWRONGDIM ,$/;"	e	enum:FVFile
FVio	include/FVio.h	/^class FVio$/;"	c
ForwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitution(FVPoint2D<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitution(FVPoint3D<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitution(FVPoint4D<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitution(FVVect<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitutionPivoting(FVPoint2D<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitutionPivoting(FVPoint3D<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitutionPivoting(FVPoint4D<double> &u) $/;"	f	class:FVDenseM
ForwardSubstitutionPivoting	include/FVDenseM.h	/^void FVDenseM<T_>::ForwardSubstitutionPivoting(FVVect<double> &u) $/;"	f	class:FVDenseM
GMElement	include/Gmsh.h	/^    GMElement(){label=0;}$/;"	f	class:GMElement
GMElement	include/Gmsh.h	/^class GMElement$/;"	c
GMSH_NB_NODE_PER_ELEMENT	include/FVLib_config.h	21;"	d
Gauss	include/FVDenseM.h	/^void  FVDenseM<T_>::Gauss(FVPoint2D<double> &u)$/;"	f	class:FVDenseM
Gauss	include/FVDenseM.h	/^void  FVDenseM<T_>::Gauss(FVPoint3D<double> &u)$/;"	f	class:FVDenseM
Gauss	include/FVDenseM.h	/^void  FVDenseM<T_>::Gauss(FVPoint4D<double> &u)$/;"	f	class:FVDenseM
Gauss	include/FVDenseM.h	/^void  FVDenseM<T_>::Gauss(FVVect<double> &u) $/;"	f	class:FVDenseM
Gmsh	include/Gmsh.h	/^class Gmsh$/;"	c
INF_MIN	include/FVLib_config.h	6;"	d
LUFactorize	include/FVDenseM.h	/^void FVDenseM<T_>::LUFactorize() $/;"	f	class:FVDenseM
LUFactorizePivoting	include/FVDenseM.h	/^void FVDenseM<T_>::LUFactorizePivoting() $/;"	f	class:FVDenseM
MINUS_ONE_DIM	include/FVLib_config.h	26;"	d
MINUS_THREE_DIM	include/FVLib_config.h	24;"	d
MINUS_TWO_DIM	include/FVLib_config.h	25;"	d
Mult	include/FVDenseM.h	/^void FVDenseM<T_>::Mult(const FVVect<T_> &x, FVVect<T_> &y) $/;"	f	class:FVDenseM
Mult	include/FVSparseM.h	/^void FVSparseM<T_>::Mult(const FVVect<T_> &x, FVVect<T_> &y) const$/;"	f	class:FVSparseM
NB_CELL_PER_VERTEX_2D	include/FVLib_config.h	13;"	d
NB_CELL_PER_VERTEX_3D	include/FVLib_config.h	16;"	d
NB_EDGE_PER_CELL_2D	include/FVLib_config.h	15;"	d
NB_EDGE_PER_FACE_3D	include/FVLib_config.h	18;"	d
NB_FACE_PER_CELL_3D	include/FVLib_config.h	20;"	d
NB_VERTEX_PER_CELL_2D	include/FVLib_config.h	14;"	d
NB_VERTEX_PER_CELL_3D	include/FVLib_config.h	19;"	d
NB_VERTEX_PER_FACE_3D	include/FVLib_config.h	17;"	d
NO_DIRS	src/Makefile	/^NO_DIRS	=	$(shell find . -mindepth 1 -maxdepth 1 -type d -name "old*")$/;"	m
NO_INDEX	include/FVSparseM.h	11;"	d
NULL_ENTITY	include/FVLib_config.h	/^           NULL_ENTITY=0,$/;"	e	enum:EntityCode
NoAttribute	include/FVLib_config.h	/^           NoAttribute,$/;"	e	enum:BaliseCode
NoCloseBalise	include/FVLib_config.h	/^           NoCloseBalise,$/;"	e	enum:BaliseCode
NoOpenBalise	include/FVLib_config.h	/^           NoOpenBalise,$/;"	e	enum:BaliseCode
Norm	include/FVPoint1D.h	/^inline double Norm(const FVPoint1D<double> &u)$/;"	f
Norm	include/FVPoint2D.h	/^inline T_ Norm(const FVPoint2D<T_> &u)$/;"	f
Norm	include/FVPoint3D.h	/^inline double Norm(const FVPoint3D<double> &u)$/;"	f
Norm	include/FVPoint4D.h	/^inline double Norm(const FVPoint4D<double> &u)$/;"	f
OkAttribute	include/FVLib_config.h	/^           OkAttribute$/;"	e	enum:BaliseCode
OkCloseBalise	include/FVLib_config.h	/^           OkCloseBalise,$/;"	e	enum:BaliseCode
OkOpenBalise	include/FVLib_config.h	/^           OkOpenBalise,$/;"	e	enum:BaliseCode
Parameter	include/Parameter.h	/^Parameter(string &){cout<<"under construction"<<endl;} \/\/ take the first parameter section$/;"	f	class:Parameter
Parameter	include/Parameter.h	/^class Parameter$/;"	c
PartialBackwardSubstitution	include/FVDenseM.h	/^void FVDenseM<T_>::PartialBackwardSubstitution( FVVect<double> & u)$/;"	f	class:FVDenseM
QRFactorize	include/FVDenseM.h	/^void FVDenseM<T_>::QRFactorize(FVDenseM<double> &q)   $/;"	f	class:FVDenseM
ROOTD	src/Makefile	/^ROOTD	=	..$/;"	m
SUP_MAX	include/FVLib_config.h	7;"	d
SparseNode	include/FVSparseM.h	/^    SparseNode(){index=0;pos=0;}$/;"	f	class:SparseNode
SparseNode	include/FVSparseM.h	/^class SparseNode$/;"	c
SparseXML	include/XML.h	/^class SparseXML $/;"	c
StringMap	include/FVLib_config.h	/^typedef  std::map<std::string,std::string> StringMap; $/;"	t
Tab_index	include/FVSparseM.h	/^typedef std::vector<SparseNode> Tab_index;$/;"	t
Table	include/Table.h	/^Table(string &,const char *){cout<<"under construction"<<endl;}\/\/take the parameter section with name$/;"	f	class:Table
Table	include/Table.h	/^class Table$/;"	c
TransMult	include/FVDenseM.h	/^void FVDenseM<T_>::TransMult(const FVVect<T_> &x, FVVect<T_> &y) $/;"	f	class:FVDenseM
TransMult	include/FVSparseM.h	/^void FVSparseM<T_>::TransMult(const FVVect<T_> &x, FVVect<T_> &y) const$/;"	f	class:FVSparseM
UNUSED	include/FVGlobal.h	7;"	d
UNUSED	include/XML.h	16;"	d
VERTEX	include/FVLib_config.h	/^           VERTEX     ,$/;"	e	enum:FVFile
_A	include/FVRecons1D.h	/^FVDenseM<double> *_A,*_Q;$/;"	m	class:FVRecons1D
_A	include/FVRecons2D.h	/^FVDenseM<double> *_A,*_Q;$/;"	m	class:FVRecons2D
_A	include/FVRecons3D.h	/^FVDenseM<double> *_A,*_Q;$/;"	m	class:FVRecons3D
_Cell1DVect	include/FVRecons1D.h	/^FVVect<double> *_Vertex1DVect,*_Cell1DVect;  $/;"	m	class:FVRecons1D
_Cell2DVect	include/FVRecons2D.h	/^FVVect<double> *_Vertex2DVect,*_Edge2DVect,*_Cell2DVect;  $/;"	m	class:FVRecons2D
_Cell3DVect	include/FVRecons3D.h	/^FVVect<double> *_Vertex3DVect,*_Edge3DVect,*_Face3DVect,*_Cell3DVect;    $/;"	m	class:FVRecons3D
_Edge2DVect	include/FVRecons2D.h	/^FVVect<double> *_Vertex2DVect,*_Edge2DVect,*_Cell2DVect;  $/;"	m	class:FVRecons2D
_Edge3DVect	include/FVRecons3D.h	/^FVVect<double> *_Vertex3DVect,*_Edge3DVect,*_Face3DVect,*_Cell3DVect;    $/;"	m	class:FVRecons3D
_FVDenseM	include/FVDenseM.h	4;"	d
_FVGAUSSPOINT_H	include/FVGaussPoint.h	4;"	d
_FVGLOBAL	include/FVGlobal.h	2;"	d
_FVLIB_	include/FVLib.h	3;"	d
_FVLIB_Config	include/FVLib_config.h	3;"	d
_FVMESH1D	include/FVMesh1D.h	5;"	d
_FVMESH2D	include/FVMesh2D.h	4;"	d
_FVMESH3D	include/FVMesh3D.h	4;"	d
_FVRECONS1D	include/FVRecons1D.h	4;"	d
_FVRECONS2D	include/FVRecons2D.h	4;"	d
_FVRECONS3D	include/FVRecons3D.h	4;"	d
_FVSkylineM	include/FVSkylineM.h	4;"	d
_FVSparseM	include/FVSparseM.h	4;"	d
_FVVect	include/FVVect.h	4;"	d
_Face3DVect	include/FVRecons3D.h	/^FVVect<double> *_Vertex3DVect,*_Edge3DVect,*_Face3DVect,*_Cell3DVect;    $/;"	m	class:FVRecons3D
_GMSH	include/Gmsh.h	5;"	d
_M	include/FVRecons1D.h	/^FVVect<double> *_coef,*_M;$/;"	m	class:FVRecons1D
_M	include/FVRecons2D.h	/^FVVect<double> *_coef,*_M;$/;"	m	class:FVRecons2D
_M	include/FVRecons3D.h	/^FVVect<double> *_coef,*_M;$/;"	m	class:FVRecons3D
_Ncoef	include/FVRecons1D.h	/^size_t _degree,_Ncoef;$/;"	m	class:FVRecons1D
_Ncoef	include/FVRecons2D.h	/^size_t _degree,_Ncoef;$/;"	m	class:FVRecons2D
_Ncoef	include/FVRecons3D.h	/^size_t _degree,_Ncoef;$/;"	m	class:FVRecons3D
_Parameter	include/Parameter.h	4;"	d
_Q	include/FVRecons1D.h	/^FVDenseM<double> *_A,*_Q;$/;"	m	class:FVRecons1D
_Q	include/FVRecons2D.h	/^FVDenseM<double> *_A,*_Q;$/;"	m	class:FVRecons2D
_Q	include/FVRecons3D.h	/^FVDenseM<double> *_A,*_Q;$/;"	m	class:FVRecons3D
_Table	include/Table.h	4;"	d
_Vertex1DVect	include/FVRecons1D.h	/^FVVect<double> *_Vertex1DVect,*_Cell1DVect;  $/;"	m	class:FVRecons1D
_Vertex2DVect	include/FVRecons2D.h	/^FVVect<double> *_Vertex2DVect,*_Edge2DVect,*_Cell2DVect;  $/;"	m	class:FVRecons2D
_Vertex3DVect	include/FVRecons3D.h	/^FVVect<double> *_Vertex3DVect,*_Edge3DVect,*_Face3DVect,*_Cell3DVect;    $/;"	m	class:FVRecons3D
_XML	include/XML.h	4;"	d
__FVCELL1D_H	include/FVCell1D.h	2;"	d
__FVCELL2D_H	include/FVCell2D.h	2;"	d
__FVCELL3D_H	include/FVCell3D.h	2;"	d
__FVEDGE2D_H	include/FVEdge2D.h	2;"	d
__FVEDGE3D_H	include/FVEdge3D.h	2;"	d
__FVFACE3D_H	include/FVFace3D.h	2;"	d
__FVIO_H	include/FVio.h	2;"	d
__FVPOINT1D_H	include/FVPoint1D.h	2;"	d
__FVPOINT2D_H	include/FVPoint2D.h	2;"	d
__FVPOINT3D_H	include/FVPoint3D.h	2;"	d
__FVPOINT4D_H	include/FVPoint4D.h	2;"	d
__FVSTENCIL_H	include/FVStencil.h	2;"	d
__FVVERTEX1D_H	include/FVVertex1D.h	2;"	d
__FVVERTEX2D_H	include/FVVertex2D.h	2;"	d
__FVVERTEX3D_H	include/FVVertex3D.h	2;"	d
_access	include/FVio.h	/^    size_t          _access;$/;"	m	class:FVio
_attribute	include/XML.h	/^StringMap _attribute;$/;"	m	class:SparseXML
_boundary_edge	include/FVMesh2D.h	/^    vector<FVEdge2D *>  _boundary_edge;  $/;"	m	class:FVMesh2D
_boundary_face	include/FVMesh3D.h	/^    vector<FVFace3D *>  _boundary_face;$/;"	m	class:FVMesh3D
_boundary_vertex	include/FVMesh1D.h	/^    vector<FVVertex1D *>  _boundary_vertex;$/;"	m	class:FVMesh1D
_cell	include/FVMesh1D.h	/^    vector<FVCell1D>  _cell;   $/;"	m	class:FVMesh1D
_cell	include/FVMesh2D.h	/^    vector<FVCell2D>  _cell;   $/;"	m	class:FVMesh2D
_cell	include/FVMesh3D.h	/^    vector<FVCell3D>   _cell;   $/;"	m	class:FVMesh3D
_coef	include/FVRecons1D.h	/^FVVect<double> *_coef,*_M;$/;"	m	class:FVRecons1D
_coef	include/FVRecons2D.h	/^FVVect<double> *_coef,*_M;$/;"	m	class:FVRecons2D
_coef	include/FVRecons3D.h	/^FVVect<double> *_coef,*_M;$/;"	m	class:FVRecons3D
_current_position	include/XML.h	/^size_t  _current_position, _data_position,_data_length;$/;"	m	class:SparseXML
_data_length	include/XML.h	/^size_t  _current_position, _data_position,_data_length;$/;"	m	class:SparseXML
_data_position	include/XML.h	/^size_t  _current_position, _data_position,_data_length;$/;"	m	class:SparseXML
_degree	include/FVRecons1D.h	/^size_t _degree,_Ncoef;$/;"	m	class:FVRecons1D
_degree	include/FVRecons2D.h	/^size_t _degree,_Ncoef;$/;"	m	class:FVRecons2D
_degree	include/FVRecons3D.h	/^size_t _degree,_Ncoef;$/;"	m	class:FVRecons3D
_dim	include/FVMesh1D.h	/^    size_t _nb_vertex,_nb_cell,_dim,_nb_boundary_vertex;$/;"	m	class:FVMesh1D
_dim	include/FVMesh2D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_boundary_edge,_dim;$/;"	m	class:FVMesh2D
_dim	include/FVMesh3D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_face,_nb_boundary_face,_dim;$/;"	m	class:FVMesh3D
_dim	include/Gmsh.h	/^    size_t _nb_node,_nb_element,_dim,_nb_save;    $/;"	m	class:Gmsh
_edge	include/FVMesh2D.h	/^    vector<FVEdge2D>  _edge;  $/;"	m	class:FVMesh2D
_edge	include/FVMesh3D.h	/^    vector<FVEdge3D>   _edge;     $/;"	m	class:FVMesh3D
_element	include/Gmsh.h	/^    vector<GMElement> _element;$/;"	m	class:Gmsh
_element	include/XML.h	/^string _element;$/;"	m	class:SparseXML
_empty_element	include/XML.h	/^bool _empty_element;$/;"	m	class:SparseXML
_face	include/FVMesh3D.h	/^    vector<FVFace3D>   _face;   $/;"	m	class:FVMesh3D
_field_name	include/FVio.h	/^    string          _field_name;$/;"	m	class:FVio
_geometry	include/FVStencil.h	/^vector<void*>  *_geometry ; $/;"	m	class:FVStencil
_if	include/Gmsh.h	/^    ifstream  _if;$/;"	m	class:Gmsh
_if_is_open	include/Gmsh.h	/^    bool _if_is_open,_of_is_open;$/;"	m	class:Gmsh
_is_open	include/FVio.h	/^    bool _is_open; $/;"	m	class:FVio
_key	include/XML.h	/^string _key;$/;"	m	class:SparseXML
_level	include/XML.h	/^size_t _level;$/;"	m	class:SparseXML
_max1	include/Table.h	/^double _max1,_max2,_max3;$/;"	m	class:Table
_max2	include/Table.h	/^double _max1,_max2,_max3;$/;"	m	class:Table
_max3	include/Table.h	/^double _max1,_max2,_max3;$/;"	m	class:Table
_min1	include/Table.h	/^double _min1,_min2,_min3;$/;"	m	class:Table
_min2	include/Table.h	/^double _min1,_min2,_min3;$/;"	m	class:Table
_min3	include/Table.h	/^double _min1,_min2,_min3;$/;"	m	class:Table
_name	include/FVMesh1D.h	/^    string _xml,_name;$/;"	m	class:FVMesh1D
_name	include/FVMesh2D.h	/^    string _xml,_name;$/;"	m	class:FVMesh2D
_name	include/FVMesh3D.h	/^    string _xml,_name;$/;"	m	class:FVMesh3D
_name	include/FVio.h	/^    string _xml,_name;$/;"	m	class:FVio
_name	include/Gmsh.h	/^    string _name;$/;"	m	class:Gmsh
_nb_boundary_edge	include/FVMesh2D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_boundary_edge,_dim;$/;"	m	class:FVMesh2D
_nb_boundary_face	include/FVMesh3D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_face,_nb_boundary_face,_dim;$/;"	m	class:FVMesh3D
_nb_boundary_vertex	include/FVMesh1D.h	/^    size_t _nb_vertex,_nb_cell,_dim,_nb_boundary_vertex;$/;"	m	class:FVMesh1D
_nb_cell	include/FVMesh1D.h	/^    size_t _nb_vertex,_nb_cell,_dim,_nb_boundary_vertex;$/;"	m	class:FVMesh1D
_nb_cell	include/FVMesh2D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_boundary_edge,_dim;$/;"	m	class:FVMesh2D
_nb_cell	include/FVMesh3D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_face,_nb_boundary_face,_dim;$/;"	m	class:FVMesh3D
_nb_edge	include/FVMesh2D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_boundary_edge,_dim;$/;"	m	class:FVMesh2D
_nb_edge	include/FVMesh3D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_face,_nb_boundary_face,_dim;$/;"	m	class:FVMesh3D
_nb_element	include/Gmsh.h	/^    size_t _nb_node,_nb_element,_dim,_nb_save;    $/;"	m	class:Gmsh
_nb_face	include/FVMesh3D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_face,_nb_boundary_face,_dim;$/;"	m	class:FVMesh3D
_nb_geometry	include/FVStencil.h	/^size_t _nb_geometry,_pos;$/;"	m	class:FVStencil
_nb_node	include/Gmsh.h	/^    size_t _nb_node,_nb_element,_dim,_nb_save;    $/;"	m	class:Gmsh
_nb_pts1	include/Table.h	/^size_t _nb_pts1,_nb_pts2,_nb_pts3;$/;"	m	class:Table
_nb_pts2	include/Table.h	/^size_t _nb_pts1,_nb_pts2,_nb_pts3;$/;"	m	class:Table
_nb_pts3	include/Table.h	/^size_t _nb_pts1,_nb_pts2,_nb_pts3;$/;"	m	class:Table
_nb_save	include/Gmsh.h	/^    size_t _nb_node,_nb_element,_dim,_nb_save;    $/;"	m	class:Gmsh
_nb_vertex	include/FVMesh1D.h	/^    size_t _nb_vertex,_nb_cell,_dim,_nb_boundary_vertex;$/;"	m	class:FVMesh1D
_nb_vertex	include/FVMesh2D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_boundary_edge,_dim;$/;"	m	class:FVMesh2D
_nb_vertex	include/FVMesh3D.h	/^    size_t _nb_vertex,_nb_cell,_nb_edge,_nb_face,_nb_boundary_face,_dim;$/;"	m	class:FVMesh3D
_nbvec	include/FVio.h	/^    size_t _nbvec,_sizevec;$/;"	m	class:FVio
_node	include/Gmsh.h	/^    vector<FVVertex3D> _node;$/;"	m	class:Gmsh
_of	include/FVio.h	/^    ofstream        _of;$/;"	m	class:FVio
_of	include/Gmsh.h	/^    ofstream _of;$/;"	m	class:Gmsh
_of_is_open	include/Gmsh.h	/^    bool _if_is_open,_of_is_open;$/;"	m	class:Gmsh
_param	include/Parameter.h	/^StringMap _param;$/;"	m	class:Parameter
_pos	include/FVStencil.h	/^size_t _nb_geometry,_pos;$/;"	m	class:FVStencil
_pos_v	include/FVCell1D.h	/^size_t _pos_v;$/;"	m	class:FVCell1D
_ptr_s	include/FVRecons1D.h	/^FVStencil * _ptr_s;$/;"	m	class:FVRecons1D
_ptr_s	include/FVRecons2D.h	/^FVStencil * _ptr_s;$/;"	m	class:FVRecons2D
_ptr_s	include/FVRecons3D.h	/^FVStencil * _ptr_s;$/;"	m	class:FVRecons3D
_ref_point	include/FVRecons1D.h	/^FVPoint1D<double> _ref_point;$/;"	m	class:FVRecons1D
_ref_point	include/FVRecons2D.h	/^FVPoint2D<double> _ref_point;$/;"	m	class:FVRecons2D
_ref_point	include/FVRecons3D.h	/^FVPoint3D<double> _ref_point;$/;"	m	class:FVRecons3D
_ref_val	include/FVRecons1D.h	/^double _ref_val;$/;"	m	class:FVRecons1D
_ref_val	include/FVRecons2D.h	/^double _ref_val;$/;"	m	class:FVRecons2D
_ref_val	include/FVRecons3D.h	/^double _ref_val;$/;"	m	class:FVRecons3D
_reference_geometry	include/FVStencil.h	/^void*  _reference_geometry;$/;"	m	class:FVStencil
_reference_type	include/FVStencil.h	/^size_t _reference_type;$/;"	m	class:FVStencil
_sizevec	include/FVio.h	/^    size_t _nbvec,_sizevec;$/;"	m	class:FVio
_spxml	include/FVMesh1D.h	/^    SparseXML _spxml;$/;"	m	class:FVMesh1D
_spxml	include/FVMesh2D.h	/^    SparseXML _spxml;$/;"	m	class:FVMesh2D
_spxml	include/FVMesh3D.h	/^    SparseXML _spxml;$/;"	m	class:FVMesh3D
_spxml	include/FVio.h	/^    SparseXML _spxml;$/;"	m	class:FVio
_table	include/Table.h	/^valarray<double> _table;  $/;"	m	class:Table
_time	include/FVio.h	/^    double _time;$/;"	m	class:FVio
_type	include/FVStencil.h	/^vector<size_t> *_type; $/;"	m	class:FVStencil
_value	include/XML.h	/^string _value;$/;"	m	class:SparseXML
_var1	include/Table.h	/^string _var1,_var2,_var3;$/;"	m	class:Table
_var2	include/Table.h	/^string _var1,_var2,_var3;$/;"	m	class:Table
_var3	include/Table.h	/^string _var1,_var2,_var3;$/;"	m	class:Table
_vertex	include/FVMesh1D.h	/^    vector<FVVertex1D> _vertex;$/;"	m	class:FVMesh1D
_vertex	include/FVMesh2D.h	/^    vector<FVVertex2D> _vertex;$/;"	m	class:FVMesh2D
_vertex	include/FVMesh3D.h	/^    vector<FVVertex3D> _vertex;$/;"	m	class:FVMesh3D
_xml	include/FVMesh1D.h	/^    string _xml,_name;$/;"	m	class:FVMesh1D
_xml	include/FVMesh2D.h	/^    string _xml,_name;$/;"	m	class:FVMesh2D
_xml	include/FVMesh3D.h	/^    string _xml,_name;$/;"	m	class:FVMesh3D
_xml	include/FVio.h	/^    string _xml,_name;$/;"	m	class:FVio
_xml_string	include/XML.h	/^string * _xml_string;  $/;"	m	class:SparseXML
a	include/FVDenseM.h	/^valarray<T_>  a;  \/\/ the place for the matrice$/;"	m	class:FVDenseM
a	include/FVSparseM.h	/^std::vector<T_>  a;  \/\/ the place for the matrice$/;"	m	class:FVSparseM
addValue	include/FVDenseM.h	/^void FVDenseM<T_>::addValue(size_t i, size_t j, const T_ &val) $/;"	f	class:FVDenseM
addValue	include/FVSparseM.h	/^void FVSparseM<T_>::addValue(size_t i, size_t j, const T_ &val)$/;"	f	class:FVSparseM
area	include/FVCell2D.h	/^double perimeter,area;$/;"	m	class:FVCell2D
area	include/FVFace3D.h	/^double perimeter,area;$/;"	m	class:FVFace3D
beginBoundaryEdge	include/FVMesh2D.h	/^     FVEdge2D* beginBoundaryEdge()$/;"	f	class:FVMesh2D
beginBoundaryFace	include/FVMesh3D.h	/^     FVFace3D* beginBoundaryFace()$/;"	f	class:FVMesh3D
beginBoundaryVertex	include/FVMesh1D.h	/^     FVVertex1D* beginBoundaryVertex()$/;"	f	class:FVMesh1D
beginCell	include/FVMesh1D.h	/^     FVCell1D* beginCell(){pos_c=0;if(pos_c<_nb_cell) return&(_cell[0]);else return(NULL);};$/;"	f	class:FVMesh1D
beginCell	include/FVMesh2D.h	/^     FVCell2D* beginCell(){pos_c=0;if(pos_c<_nb_cell) return&(_cell[0]);else return(NULL);}$/;"	f	class:FVMesh2D
beginCell	include/FVMesh3D.h	/^     FVCell3D* beginCell(){pos_c=0;if(pos_c<_nb_cell) return&(_cell[0]);else return(NULL);}$/;"	f	class:FVMesh3D
beginCell	include/FVVertex2D.h	/^     FVCell2D* beginCell(){pos_c=0;if(pos_c<nb_cell) return(cell[0]);else return(NULL);};$/;"	f	class:FVVertex2D
beginCell	include/FVVertex3D.h	/^     FVCell3D* beginCell(){pos_c=0;if(pos_c<nb_cell) return(cell[0]);else return(NULL);};$/;"	f	class:FVVertex3D
beginEdge	include/FVCell2D.h	/^     FVEdge2D* beginEdge(){pos_e=0;if(pos_e<nb_edge) return(edge[0]);else return(NULL);};$/;"	f	class:FVCell2D
beginEdge	include/FVFace3D.h	/^     FVEdge3D* beginEdge(){pos_e=0;if(pos_e<nb_edge) return(edge[0]);else return(NULL);};$/;"	f	class:FVFace3D
beginEdge	include/FVMesh2D.h	/^     FVEdge2D* beginEdge(){pos_e=0;if(pos_e<_nb_edge) return&(_edge[0]);else return(NULL);}$/;"	f	class:FVMesh2D
beginEdge	include/FVMesh3D.h	/^     FVEdge3D* beginEdge(){pos_e=0;if(pos_e<_nb_edge) return&(_edge[0]);else return(NULL);}$/;"	f	class:FVMesh3D
beginElement	include/FVVect.h	/^    T_ beginElement(){pos=0;if(pos< this->size()) return((*this)[0]);else return(NULL);}$/;"	f	class:FVVect
beginFace	include/FVCell3D.h	/^     FVFace3D* beginFace(){pos_f=0;if(pos_f<nb_face) return(face[0]);else return(NULL);};$/;"	f	class:FVCell3D
beginFace	include/FVMesh3D.h	/^     FVFace3D* beginFace(){pos_f=0;if(pos_f<_nb_face) return&(_face[0]);else return(NULL);}$/;"	f	class:FVMesh3D
beginGeometry	include/FVStencil.h	/^     void* beginGeometry(){_pos=0;if(_pos<_nb_geometry) return((*_geometry)[0]);else return(NULL);}$/;"	f	class:FVStencil
beginVertex	include/FVCell1D.h	/^     FVVertex1D* beginVertex(){_pos_v=0;return(firstVertex);}$/;"	f	class:FVCell1D
beginVertex	include/FVCell2D.h	/^     FVVertex2D* beginVertex(){pos_v=0;if(pos_v<nb_vertex) return(vertex[0]);else return(NULL);}$/;"	f	class:FVCell2D
beginVertex	include/FVCell3D.h	/^     FVVertex3D* beginVertex(){pos_v=0;if(pos_v<nb_vertex) return(vertex[0]);else return(NULL);}$/;"	f	class:FVCell3D
beginVertex	include/FVFace3D.h	/^     FVVertex3D* beginVertex(){pos_v=0;if(pos_v<nb_vertex) return(vertex[0]);else return(NULL);}$/;"	f	class:FVFace3D
beginVertex	include/FVMesh1D.h	/^     FVVertex1D* beginVertex(){pos_v=0;if(pos_v<_nb_vertex) return&(_vertex[0]);else return(NULL);}$/;"	f	class:FVMesh1D
beginVertex	include/FVMesh2D.h	/^     FVVertex2D* beginVertex(){pos_v=0;if(pos_v<_nb_vertex) return&(_vertex[0]);else return(NULL);}$/;"	f	class:FVMesh2D
beginVertex	include/FVMesh3D.h	/^     FVVertex3D* beginVertex(){pos_v=0;if(pos_v<_nb_vertex) return&(_vertex[0]);else return(NULL);}$/;"	f	class:FVMesh3D
cell	include/FVVertex2D.h	/^FVCell2D* cell[NB_CELL_PER_VERTEX_2D]; $/;"	m	class:FVVertex2D
cell	include/FVVertex3D.h	/^FVCell3D* cell[NB_CELL_PER_VERTEX_3D]; $/;"	m	class:FVVertex3D
cell2edge	include/FVCell2D.h	/^FVPoint2D<double>  cell2edge[NB_EDGE_PER_CELL_2D]; \/\/ normal exterior for each edge$/;"	m	class:FVCell2D
cell2face	include/FVCell3D.h	/^FVPoint3D<double>  cell2face[NB_FACE_PER_CELL_3D]; \/\/ normal exterior for each face$/;"	m	class:FVCell3D
centroid	include/FVCell1D.h	/^FVPoint1D<double> centroid;$/;"	m	class:FVCell1D
centroid	include/FVCell2D.h	/^FVPoint2D<double> centroid;$/;"	m	class:FVCell2D
centroid	include/FVCell3D.h	/^FVPoint3D<double> centroid;$/;"	m	class:FVCell3D
centroid	include/FVEdge2D.h	/^FVPoint2D<double> centroid;$/;"	m	class:FVEdge2D
centroid	include/FVEdge3D.h	/^FVPoint3D<double> centroid;$/;"	m	class:FVEdge3D
centroid	include/FVFace3D.h	/^FVPoint3D<double> centroid;$/;"	m	class:FVFace3D
clean	include/FVRecons1D.h	/^void clean()$/;"	f	class:FVRecons1D
clean	include/FVRecons2D.h	/^void clean()$/;"	f	class:FVRecons2D
clean	include/FVRecons3D.h	/^void clean()$/;"	f	class:FVRecons3D
clean	include/FVStencil.h	/^     void clean(){_nb_geometry=0;_reference_geometry=NULL;_reference_type=NULL_ENTITY;$/;"	f	class:FVStencil
code	include/FVCell1D.h	/^size_t label,code,nb_vertex;$/;"	m	class:FVCell1D
code	include/FVCell2D.h	/^size_t label,code,nb_vertex,nb_edge;$/;"	m	class:FVCell2D
code	include/FVCell3D.h	/^size_t label,code,nb_vertex,nb_face;$/;"	m	class:FVCell3D
code	include/FVEdge2D.h	/^size_t label, code,nb_vertex,nb_cell;$/;"	m	class:FVEdge2D
code	include/FVEdge3D.h	/^size_t label, code,nb_vertex;$/;"	m	class:FVEdge3D
code	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
code	include/FVVertex1D.h	/^size_t label, code;$/;"	m	class:FVVertex1D
code	include/FVVertex2D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex2D
code	include/FVVertex3D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex3D
code_elementary	include/Gmsh.h	/^size_t label,type_element,code_physical, code_elementary,nb_node,dim;$/;"	m	class:GMElement
code_physical	include/Gmsh.h	/^size_t label,type_element,code_physical, code_elementary,nb_node,dim;$/;"	m	class:GMElement
col	include/FVSparseM.h	/^std::vector<Tab_index *> row,col; \/\/ index table$/;"	m	class:FVSparseM
coord	include/FVVertex1D.h	/^FVPoint1D<double> coord, normal;$/;"	m	class:FVVertex1D
coord	include/FVVertex2D.h	/^FVPoint2D <double> coord;$/;"	m	class:FVVertex2D
coord	include/FVVertex3D.h	/^FVPoint3D <double> coord;$/;"	m	class:FVVertex3D
dim	include/Gmsh.h	/^size_t label,type_element,code_physical, code_elementary,nb_node,dim;$/;"	m	class:GMElement
edge	include/FVCell2D.h	/^FVEdge2D* edge[NB_EDGE_PER_CELL_2D];     \/\/ the edge$/;"	m	class:FVCell2D
edge	include/FVFace3D.h	/^FVEdge3D *edge[NB_EDGE_PER_FACE_3D]; \/\/ the vertices$/;"	m	class:FVFace3D
exist	include/FVSparseM.h	/^size_t FVSparseM<T_>::exist( Tab_index *tab,size_t loc)$/;"	f	class:FVSparseM
face	include/FVCell3D.h	/^FVFace3D* face[NB_FACE_PER_CELL_3D];     \/\/ the face$/;"	m	class:FVCell3D
firstVertex	include/FVCell1D.h	/^FVVertex1D *firstVertex,*secondVertex; \/\/ the two vertices$/;"	m	class:FVCell1D
firstVertex	include/FVEdge2D.h	/^FVVertex2D *firstVertex,*secondVertex; \/\/ the two vertices$/;"	m	class:FVEdge2D
firstVertex	include/FVEdge3D.h	/^FVVertex3D *firstVertex,*secondVertex; \/\/ the two vertices$/;"	m	class:FVEdge3D
first_normal	include/FVCell1D.h	/^FVPoint1D<double> first_normal,second_normal; \/\/ normal exterior$/;"	m	class:FVCell1D
get	include/FVio.h	/^    size_t get(FVVect <FVPoint2D<double> > &u)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <FVPoint2D<double> >&u, double &time)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <FVPoint3D<double> > &u)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <FVPoint3D<double> >&u, double &time)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <double> &u)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <double> &u,  double &time )$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <double> &u, FVVect <double> &v)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <double> &u, FVVect <double> &v, FVVect <double> &w)$/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <double> &u, FVVect <double> &v, FVVect <double> &w, double &time)   $/;"	f	class:FVio
get	include/FVio.h	/^    size_t get(FVVect <double> &u, FVVect <double> &v, double &time)$/;"	f	class:FVio
getAttribute	include/XML.h	/^  StringMap getAttribute(){ return _attribute;}$/;"	f	class:SparseXML
getCell	include/FVMesh1D.h	/^     FVCell1D*    getCell(size_t i){return &(_cell[i]);}     $/;"	f	class:FVMesh1D
getCell	include/FVMesh2D.h	/^     FVCell2D*    getCell(size_t i){return &(_cell[i]);}    $/;"	f	class:FVMesh2D
getCell	include/FVMesh3D.h	/^     FVCell3D*    getCell(size_t i){return &(_cell[i]);}   $/;"	f	class:FVMesh3D
getCell2Edge	include/FVCell2D.h	/^     FVPoint2D<double> getCell2Edge(){return cell2edge[pos_e-1];}$/;"	f	class:FVCell2D
getCell2Face	include/FVCell3D.h	/^     FVPoint3D<double> getCell2Face(){return cell2face[pos_f-1];}$/;"	f	class:FVCell3D
getDerivative	include/FVRecons1D.h	/^FVPoint1D<double> getDerivative(FVPoint1D<double> P){return(FVRecons1D::getDerivative(P,_degree));}$/;"	f	class:FVRecons1D
getDerivative	include/FVRecons2D.h	/^FVPoint2D<double> getDerivative(FVPoint2D<double> P){return(FVRecons2D::getDerivative(P,_degree));}$/;"	f	class:FVRecons2D
getDerivative	include/FVRecons3D.h	/^FVPoint3D<double> getDerivative(FVPoint3D<double> P){return(FVRecons3D::getDerivative(P,_degree));}$/;"	f	class:FVRecons3D
getDim	include/Gmsh.h	/^     size_t getDim(){return _dim;}            $/;"	f	class:Gmsh
getDouble	include/Parameter.h	/^double getDouble(const char *keyname)$/;"	f	class:Parameter
getDouble	include/Parameter.h	/^double getDouble(const string &key)$/;"	f	class:Parameter
getEdge	include/FVMesh2D.h	/^     FVEdge2D*    getEdge(size_t i){return &(_edge[i]);}      $/;"	f	class:FVMesh2D
getEdge	include/FVMesh3D.h	/^     FVEdge3D*    getEdge(size_t i){return &(_edge[i]);}   $/;"	f	class:FVMesh3D
getElement	include/Gmsh.h	/^     GMElement* getElement(const size_t i){return &(_element[i]);}$/;"	f	class:Gmsh
getElement	include/XML.h	/^  string getElement(){return _element;}$/;"	f	class:SparseXML
getFace	include/FVMesh3D.h	/^     FVFace3D*    getFace(size_t i){return &(_face[i]);}      $/;"	f	class:FVMesh3D
getGeometry	include/FVStencil.h	/^     void* getGeometry(size_t i){return ((*_geometry)[i]);}$/;"	f	class:FVStencil
getIndex	include/FVStencil.h	/^     size_t getIndex(){if(_pos>0) return (_pos-1); else return(0);}$/;"	f	class:FVStencil
getInteger	include/Parameter.h	/^int getInteger(const char *keyname)$/;"	f	class:Parameter
getInteger	include/Parameter.h	/^int getInteger(const string &key)$/;"	f	class:Parameter
getLength	include/FVDenseM.h	/^    size_t getLength(){ return length;}    $/;"	f	class:FVDenseM
getLength	include/FVSparseM.h	/^    size_t getLength(){ return length;} $/;"	f	class:FVSparseM
getLength	include/XML.h	/^  size_t getLength(){return _data_length;}$/;"	f	class:SparseXML
getLevel	include/XML.h	/^  size_t getLevel(){return _level;}$/;"	f	class:SparseXML
getMax1	include/Table.h	/^double getMax1(){return _max1;}$/;"	f	class:Table
getMax2	include/Table.h	/^double getMax2(){return _max2;}$/;"	f	class:Table
getMax3	include/Table.h	/^double getMax3(){return _max3;}$/;"	f	class:Table
getMin1	include/Table.h	/^double getMin1(){return _min1;}$/;"	f	class:Table
getMin2	include/Table.h	/^double getMin2(){return _min2;}$/;"	f	class:Table
getMin3	include/Table.h	/^double getMin3(){return _min3;}$/;"	f	class:Table
getName	include/FVMesh1D.h	/^     string getName(){ return _name;}$/;"	f	class:FVMesh1D
getName	include/FVMesh2D.h	/^     string getName(){ return _name;}$/;"	f	class:FVMesh2D
getName	include/FVMesh3D.h	/^     string getName(){ return _name;}$/;"	f	class:FVMesh3D
getNbBoundaryEdge	include/FVMesh2D.h	/^     size_t getNbBoundaryEdge(){return _nb_boundary_edge;}$/;"	f	class:FVMesh2D
getNbBoundaryFace	include/FVMesh3D.h	/^     size_t getNbBoundaryFace(){return _nb_boundary_face;}$/;"	f	class:FVMesh3D
getNbBoundaryVertex	include/FVMesh1D.h	/^     size_t getNbBoundaryVertex(){return _nb_boundary_vertex;}$/;"	f	class:FVMesh1D
getNbCell	include/FVMesh1D.h	/^     size_t getNbCell() {return _nb_cell;}$/;"	f	class:FVMesh1D
getNbCell	include/FVMesh2D.h	/^     size_t getNbCell() {return _nb_cell;}$/;"	f	class:FVMesh2D
getNbCell	include/FVMesh3D.h	/^     size_t getNbCell() {return _nb_cell;}$/;"	f	class:FVMesh3D
getNbColumns	include/FVDenseM.h	/^    size_t getNbColumns() {return nb_cols;}$/;"	f	class:FVDenseM
getNbColumns	include/FVSparseM.h	/^    size_t getNbColumns() {return nb_cols;}$/;"	f	class:FVSparseM
getNbEdge	include/FVMesh2D.h	/^     size_t getNbEdge() {return _nb_edge;}    $/;"	f	class:FVMesh2D
getNbEdge	include/FVMesh3D.h	/^     size_t getNbEdge() {return _nb_edge;}    $/;"	f	class:FVMesh3D
getNbElement	include/Gmsh.h	/^     size_t getNbElement(){return _nb_element;}     $/;"	f	class:Gmsh
getNbFace	include/FVMesh3D.h	/^     size_t getNbFace() {return _nb_face;}  $/;"	f	class:FVMesh3D
getNbGeometry	include/FVStencil.h	/^     size_t getNbGeometry(){return(_nb_geometry);}$/;"	f	class:FVStencil
getNbNode	include/Gmsh.h	/^     size_t getNbNode(){return _nb_node;}$/;"	f	class:Gmsh
getNbPoints1	include/Table.h	/^size_t  getNbPoints1(){return _nb_pts1;}$/;"	f	class:Table
getNbPoints2	include/Table.h	/^size_t  getNbPoints2(){return _nb_pts2;}$/;"	f	class:Table
getNbPoints3	include/Table.h	/^size_t  getNbPoints3(){return _nb_pts3;}$/;"	f	class:Table
getNbRows	include/FVDenseM.h	/^    size_t getNbRows(){ return nb_rows;}$/;"	f	class:FVDenseM
getNbRows	include/FVSparseM.h	/^    size_t getNbRows(){ return nb_rows;}$/;"	f	class:FVSparseM
getNbVect	include/FVio.h	/^    size_t getNbVect(){return(_nbvec);}$/;"	f	class:FVio
getNbVertex	include/FVMesh1D.h	/^     size_t getNbVertex(){ return _nb_vertex;}$/;"	f	class:FVMesh1D
getNbVertex	include/FVMesh2D.h	/^     size_t getNbVertex(){return _nb_vertex;}$/;"	f	class:FVMesh2D
getNbVertex	include/FVMesh3D.h	/^     size_t getNbVertex(){return _nb_vertex;}$/;"	f	class:FVMesh3D
getNode	include/Gmsh.h	/^     FVVertex3D* getNode(const size_t i){return &(_node[i]);}$/;"	f	class:Gmsh
getNormal	include/FVFace3D.h	/^     FVPoint3D<double> getNormal(){return normal[pos_e];}$/;"	f	class:FVFace3D
getPolynomialDegree	include/FVRecons1D.h	/^size_t getPolynomialDegree(){return(_degree); } $/;"	f	class:FVRecons1D
getPolynomialDegree	include/FVRecons2D.h	/^size_t getPolynomialDegree(){return(_degree); } $/;"	f	class:FVRecons2D
getPolynomialDegree	include/FVRecons3D.h	/^size_t getPolynomialDegree(){return(_degree); } $/;"	f	class:FVRecons3D
getPosition	include/XML.h	/^  size_t getPosition(){return _data_position ;}$/;"	f	class:SparseXML
getReferenceGeometry	include/FVStencil.h	/^     void* getReferenceGeometry(){return (_reference_geometry);}         $/;"	f	class:FVStencil
getReferenceType	include/FVStencil.h	/^     size_t getReferenceType(){return _reference_type;}     $/;"	f	class:FVStencil
getString	include/Parameter.h	/^string getString(const char *keyname)$/;"	f	class:Parameter
getString	include/Parameter.h	/^string getString(const string &key)$/;"	f	class:Parameter
getTab	include/FVDenseM.h	/^    valarray<T_> * getTab(){return &a;}$/;"	f	class:FVDenseM
getType	include/FVStencil.h	/^     size_t getType(){if(_pos>0) return((*_type)[_pos-1]); else return(NULL_ENTITY);}$/;"	f	class:FVStencil
getType	include/FVStencil.h	/^     size_t getType(size_t i){return((*_type)[i]);}   $/;"	f	class:FVStencil
getUnsigned	include/Parameter.h	/^size_t getUnsigned(const char *keyname)$/;"	f	class:Parameter
getUnsigned	include/Parameter.h	/^size_t getUnsigned(const string &key)$/;"	f	class:Parameter
getValue	include/FVDenseM.h	/^T_  FVDenseM<T_>::getValue(size_t i, size_t j)$/;"	f	class:FVDenseM
getValue	include/FVRecons1D.h	/^double getValue(FVPoint1D<double> P){return(FVRecons1D::getValue(P,_degree));} $/;"	f	class:FVRecons1D
getValue	include/FVRecons2D.h	/^double getValue(FVPoint2D<double> P){return(FVRecons2D::getValue(P,_degree));}    $/;"	f	class:FVRecons2D
getValue	include/FVRecons3D.h	/^double getValue(FVPoint3D<double> P){return(FVRecons3D::getValue(P,_degree));}    $/;"	f	class:FVRecons3D
getValue	include/FVSparseM.h	/^T_ FVSparseM<T_>::getValue(size_t i, size_t j)  $/;"	f	class:FVSparseM
getVar1	include/Table.h	/^string getVar1(){return _var1;}$/;"	f	class:Table
getVar2	include/Table.h	/^string getVar2(){return _var2;}$/;"	f	class:Table
getVar3	include/Table.h	/^string getVar3(){return _var3;}$/;"	f	class:Table
getVertex	include/FVMesh1D.h	/^     FVVertex1D*  getVertex(size_t i){return &(_vertex[i]);} $/;"	f	class:FVMesh1D
getVertex	include/FVMesh2D.h	/^     FVVertex2D*  getVertex(size_t i){return &(_vertex[i]);} $/;"	f	class:FVMesh2D
getVertex	include/FVMesh3D.h	/^     FVVertex3D*  getVertex(size_t i){return &(_vertex[i]);} $/;"	f	class:FVMesh3D
index	include/FVSparseM.h	/^    size_t index;$/;"	m	class:SparseNode
isEqual	include/FVCell1D.h	/^inline bool isEqual(FVCell1D *c1, FVCell1D *c2)$/;"	f
isEqual	include/FVCell2D.h	/^inline bool isEqual(FVCell2D *c1, FVCell2D *c2)$/;"	f
isEqual	include/FVCell3D.h	/^inline bool isEqual(FVCell3D *c1, FVCell3D *c2)$/;"	f
isEqual	include/FVEdge2D.h	/^inline bool isEqual(FVEdge2D *e1, FVEdge2D *e2)$/;"	f
isEqual	include/FVEdge3D.h	/^inline bool isEqual(FVEdge3D *e1, FVEdge3D *e2)$/;"	f
isEqual	include/FVFace3D.h	/^inline bool isEqual(FVFace3D *f1, FVFace3D *f2)$/;"	f
isEqual	include/FVVertex1D.h	/^inline bool isEqual(FVVertex1D *v1, FVVertex1D *v2)$/;"	f
isEqual	include/FVVertex2D.h	/^inline bool isEqual(FVVertex2D *v1, FVVertex2D *v2)$/;"	f
isEqual	include/FVVertex3D.h	/^inline bool isEqual(FVVertex3D *v1, FVVertex3D *v2)$/;"	f
label	include/FVCell1D.h	/^size_t label,code,nb_vertex;$/;"	m	class:FVCell1D
label	include/FVCell2D.h	/^size_t label,code,nb_vertex,nb_edge;$/;"	m	class:FVCell2D
label	include/FVCell3D.h	/^size_t label,code,nb_vertex,nb_face;$/;"	m	class:FVCell3D
label	include/FVEdge2D.h	/^size_t label, code,nb_vertex,nb_cell;$/;"	m	class:FVEdge2D
label	include/FVEdge3D.h	/^size_t label, code,nb_vertex;$/;"	m	class:FVEdge3D
label	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
label	include/FVVertex1D.h	/^size_t label, code;$/;"	m	class:FVVertex1D
label	include/FVVertex2D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex2D
label	include/FVVertex3D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex3D
label	include/Gmsh.h	/^size_t label,type_element,code_physical, code_elementary,nb_node,dim;$/;"	m	class:GMElement
leftCell	include/FVEdge2D.h	/^FVCell2D *leftCell,*rightCell;  \/\/ the two cells$/;"	m	class:FVEdge2D
leftCell	include/FVFace3D.h	/^FVCell3D *leftCell,*rightCell;  \/\/ the two cells$/;"	m	class:FVFace3D
leftCell	include/FVVertex1D.h	/^FVCell1D *leftCell,*rightCell;$/;"	m	class:FVVertex1D
length	include/FVCell1D.h	/^double length;$/;"	m	class:FVCell1D
length	include/FVDenseM.h	/^size_t nb_cols,nb_rows,length; \/\/ row and column$/;"	m	class:FVDenseM
length	include/FVEdge2D.h	/^double length;$/;"	m	class:FVEdge2D
length	include/FVEdge3D.h	/^double length;$/;"	m	class:FVEdge3D
length	include/FVSparseM.h	/^size_t nb_cols,nb_rows,length; \/\/ number of rows and columns  , length of the matrix $/;"	m	class:FVSparseM
nb_cell	include/FVEdge2D.h	/^size_t label, code,nb_vertex,nb_cell;$/;"	m	class:FVEdge2D
nb_cell	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
nb_cell	include/FVVertex2D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex2D
nb_cell	include/FVVertex3D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex3D
nb_cols	include/FVDenseM.h	/^size_t nb_cols,nb_rows,length; \/\/ row and column$/;"	m	class:FVDenseM
nb_cols	include/FVSparseM.h	/^size_t nb_cols,nb_rows,length; \/\/ number of rows and columns  , length of the matrix $/;"	m	class:FVSparseM
nb_edge	include/FVCell2D.h	/^size_t label,code,nb_vertex,nb_edge;$/;"	m	class:FVCell2D
nb_edge	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
nb_face	include/FVCell3D.h	/^size_t label,code,nb_vertex,nb_face;$/;"	m	class:FVCell3D
nb_node	include/Gmsh.h	/^size_t label,type_element,code_physical, code_elementary,nb_node,dim;$/;"	m	class:GMElement
nb_rows	include/FVDenseM.h	/^size_t nb_cols,nb_rows,length; \/\/ row and column$/;"	m	class:FVDenseM
nb_rows	include/FVSparseM.h	/^size_t nb_cols,nb_rows,length; \/\/ number of rows and columns  , length of the matrix $/;"	m	class:FVSparseM
nb_vertex	include/FVCell1D.h	/^size_t label,code,nb_vertex;$/;"	m	class:FVCell1D
nb_vertex	include/FVCell2D.h	/^size_t label,code,nb_vertex,nb_edge;$/;"	m	class:FVCell2D
nb_vertex	include/FVCell3D.h	/^size_t label,code,nb_vertex,nb_face;$/;"	m	class:FVCell3D
nb_vertex	include/FVEdge2D.h	/^size_t label, code,nb_vertex,nb_cell;$/;"	m	class:FVEdge2D
nb_vertex	include/FVEdge3D.h	/^size_t label, code,nb_vertex;$/;"	m	class:FVEdge3D
nb_vertex	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
nextBoundaryEdge	include/FVMesh2D.h	/^     FVEdge2D* nextBoundaryEdge()$/;"	f	class:FVMesh2D
nextBoundaryFace	include/FVMesh3D.h	/^     FVFace3D* nextBoundaryFace()$/;"	f	class:FVMesh3D
nextBoundaryVertex	include/FVMesh1D.h	/^     FVVertex1D* nextBoundaryVertex()$/;"	f	class:FVMesh1D
nextCell	include/FVMesh1D.h	/^     FVCell1D* nextCell(){if(pos_c<_nb_cell) return&(_cell[pos_c++]);else return(NULL);} $/;"	f	class:FVMesh1D
nextCell	include/FVMesh2D.h	/^     FVCell2D* nextCell(){if(pos_c<_nb_cell) return&(_cell[pos_c++]);else return(NULL);}    $/;"	f	class:FVMesh2D
nextCell	include/FVMesh3D.h	/^     FVCell3D* nextCell(){if(pos_c<_nb_cell) return &(_cell[pos_c++]);else return(NULL);}    $/;"	f	class:FVMesh3D
nextCell	include/FVVertex2D.h	/^     FVCell2D* nextCell(){if(pos_c<nb_cell) return (cell[pos_c++]);else return(NULL);}    $/;"	f	class:FVVertex2D
nextCell	include/FVVertex3D.h	/^     FVCell3D* nextCell(){if(pos_c<nb_cell) return (cell[pos_c++]);else return(NULL);}        $/;"	f	class:FVVertex3D
nextEdge	include/FVCell2D.h	/^     FVEdge2D* nextEdge(){if(pos_e<nb_edge) return(edge[pos_e++]);else return(NULL);} $/;"	f	class:FVCell2D
nextEdge	include/FVFace3D.h	/^     FVEdge3D* nextEdge(){if(pos_e<nb_edge) return(edge[pos_e++]);else return(NULL);} $/;"	f	class:FVFace3D
nextEdge	include/FVMesh2D.h	/^     FVEdge2D* nextEdge(){if(pos_e<_nb_edge) return&(_edge[pos_e++]);else return(NULL);}    $/;"	f	class:FVMesh2D
nextEdge	include/FVMesh3D.h	/^     FVEdge3D* nextEdge(){if(pos_e<_nb_edge) return&(_edge[pos_e++]);else return(NULL);}   $/;"	f	class:FVMesh3D
nextElement	include/FVVect.h	/^    T_ nextElement(){if(pos<this->size()) return((*this)[pos++]);else return(NULL);}  $/;"	f	class:FVVect
nextFace	include/FVCell3D.h	/^     FVFace3D* nextFace(){if(pos_f<nb_face) return(face[pos_f++]);else return(NULL);}     $/;"	f	class:FVCell3D
nextFace	include/FVMesh3D.h	/^     FVFace3D* nextFace(){if(pos_f<_nb_face) return&(_face[pos_f++]);else return(NULL);}   $/;"	f	class:FVMesh3D
nextGeometry	include/FVStencil.h	/^     void* nextGeometry(){if(_pos<_nb_geometry) return((*_geometry)[_pos++]);else return(NULL);}   $/;"	f	class:FVStencil
nextVertex	include/FVCell1D.h	/^     FVVertex1D* nextVertex(){$/;"	f	class:FVCell1D
nextVertex	include/FVCell2D.h	/^     FVVertex2D* nextVertex(){if(pos_v<nb_vertex) return(vertex[pos_v++]);else return(NULL);}  $/;"	f	class:FVCell2D
nextVertex	include/FVCell3D.h	/^     FVVertex3D* nextVertex(){if(pos_v<nb_vertex) return(vertex[pos_v++]);else return(NULL);}  $/;"	f	class:FVCell3D
nextVertex	include/FVFace3D.h	/^     FVVertex3D* nextVertex(){if(pos_v<nb_vertex) return(vertex[pos_v++]);else return(NULL);}  $/;"	f	class:FVFace3D
nextVertex	include/FVMesh1D.h	/^     FVVertex1D* nextVertex(){if(pos_v<_nb_vertex) return&(_vertex[pos_v++]);else return(NULL);}$/;"	f	class:FVMesh1D
nextVertex	include/FVMesh2D.h	/^     FVVertex2D* nextVertex(){if(pos_v<_nb_vertex) return&(_vertex[pos_v++]);else return(NULL);}$/;"	f	class:FVMesh2D
nextVertex	include/FVMesh3D.h	/^     FVVertex3D* nextVertex(){if(pos_v<_nb_vertex) return&(_vertex[pos_v++]);else return(NULL);}$/;"	f	class:FVMesh3D
node	include/Gmsh.h	/^size_t node[GMSH_NB_NODE_PER_ELEMENT];$/;"	m	class:GMElement
normal	include/FVEdge2D.h	/^FVPoint2D<double> normal;  \/\/ from left to right$/;"	m	class:FVEdge2D
normal	include/FVFace3D.h	/^FVPoint3D<double> normal[NB_VERTEX_PER_FACE_3D];  \/\/ from left to right$/;"	m	class:FVFace3D
normal	include/FVVertex1D.h	/^FVPoint1D<double> coord, normal;$/;"	m	class:FVVertex1D
operator *	include/FVDenseM.h	/^FVDenseM<T_> operator*(const FVDenseM<T_> &aa,const T_ &val)$/;"	f
operator *	include/FVPoint1D.h	/^FVPoint1D<T_> operator* (const FVPoint1D<T_> &b, const T_ &x) $/;"	f
operator *	include/FVPoint1D.h	/^FVPoint1D<T_> operator* (const T_ &x, const FVPoint1D<T_> &b) $/;"	f
operator *	include/FVPoint1D.h	/^T_ operator* (const FVPoint1D<T_> &b, const FVPoint1D<T_> &a) $/;"	f
operator *	include/FVPoint2D.h	/^FVPoint2D<T_> operator* (const FVPoint2D<T_> &b, const T_ &x) $/;"	f
operator *	include/FVPoint2D.h	/^FVPoint2D<T_> operator* (const T_ &x, const FVPoint2D<T_> &b) $/;"	f
operator *	include/FVPoint2D.h	/^T_ operator* (const FVPoint2D<T_> &b, const FVPoint2D<T_> &a) $/;"	f
operator *	include/FVPoint3D.h	/^FVPoint3D<T_> operator* (const FVPoint3D<T_> &b, const T_ &a) $/;"	f
operator *	include/FVPoint3D.h	/^FVPoint3D<T_> operator* (const T_ &a, const FVPoint3D<T_> &b) $/;"	f
operator *	include/FVPoint3D.h	/^T_ operator* (const FVPoint3D<T_> &b, const FVPoint3D<T_> &a) $/;"	f
operator *	include/FVPoint4D.h	/^FVPoint4D<T_> operator* (const FVPoint4D<T_> &b, const T_ &a) $/;"	f
operator *	include/FVPoint4D.h	/^FVPoint4D<T_> operator* (const T_ &a, const FVPoint4D<T_> &b) $/;"	f
operator *	include/FVPoint4D.h	/^T_ operator* (const FVPoint4D<T_> &b, const FVPoint4D<T_> &a) $/;"	f
operator *	include/FVVect.h	/^FVVect<T_> operator*(const T_ &a, const FVVect<T_> &x)$/;"	f
operator *=	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator*=(const T_ &val)$/;"	f	class:FVDenseM
operator *=	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator*=(const T_ &a) { x*=a;  return *this; }$/;"	f	class:FVPoint1D
operator *=	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator*=(const T_ &a) { x*=a; y*=a;  return *this; }$/;"	f	class:FVPoint2D
operator *=	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator*=(const T_ &a) { x*=a; y*=a; z*=a; return *this; }$/;"	f	class:FVPoint3D
operator *=	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator*=(const T_ &a) { x*=a; y*=a; z*=a; t*=a;return *this; }$/;"	f	class:FVPoint4D
operator *=	include/FVSparseM.h	/^FVSparseM<T_> & FVSparseM<T_>::operator*=(const T_ &val)$/;"	f	class:FVSparseM
operator *=	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator*=(const T_ &a)$/;"	f	class:FVVect
operator +	include/FVDenseM.h	/^FVDenseM<T_> operator+(const FVDenseM<T_> &aa, const FVDenseM<T_> &bb)$/;"	f
operator +	include/FVDenseM.h	/^FVDenseM<T_> operator+(const FVDenseM<T_> &aa,const T_ &val)$/;"	f
operator +	include/FVPoint1D.h	/^FVPoint1D<T_> operator+ (const FVPoint1D<T_> &a, const FVPoint1D<T_> &b) $/;"	f
operator +	include/FVPoint1D.h	/^FVPoint1D<T_> operator+ (const FVPoint1D<T_> &a, const T_ &x) $/;"	f
operator +	include/FVPoint2D.h	/^FVPoint2D<T_> operator+ (const FVPoint2D<T_> &a, const FVPoint2D<T_> &b) $/;"	f
operator +	include/FVPoint2D.h	/^FVPoint2D<T_> operator+ (const FVPoint2D<T_> &a, const T_ &x) $/;"	f
operator +	include/FVPoint3D.h	/^FVPoint3D<T_> operator+ (const FVPoint3D<T_> &a, const FVPoint3D<T_> &b) $/;"	f
operator +	include/FVPoint3D.h	/^FVPoint3D<T_> operator+ (const FVPoint3D<T_> &a, const T_ &x) $/;"	f
operator +	include/FVPoint4D.h	/^FVPoint4D<T_> operator+ (const FVPoint4D<T_> &a, const FVPoint4D<T_> &b) $/;"	f
operator +	include/FVPoint4D.h	/^FVPoint4D<T_> operator+ (const FVPoint4D<T_> &a, const T_ &x) $/;"	f
operator +	include/FVVect.h	/^FVVect<T_> operator+(const FVVect<T_> &x, const FVVect<T_> &y)$/;"	f
operator +=	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator+=(const FVDenseM<T_> &m)$/;"	f	class:FVDenseM
operator +=	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator+=(const T_ &val)$/;"	f	class:FVDenseM
operator +=	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator+=(const FVPoint1D<T_> &p) { x+=p.x; return *this; }$/;"	f	class:FVPoint1D
operator +=	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator+=(const T_ &a) { x+=a;  return *this; }$/;"	f	class:FVPoint1D
operator +=	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator+=(const FVPoint2D<T_> &p) { x+=p.x; y+=p.y; return *this; }$/;"	f	class:FVPoint2D
operator +=	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator+=(const T_ &a) { x+=a; y+=a;  return *this; }$/;"	f	class:FVPoint2D
operator +=	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator+=(const FVPoint3D<T_> &p) { x+=p.x; y+=p.y; z+=p.z; return *this; }$/;"	f	class:FVPoint3D
operator +=	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator+=(const T_ &a) { x+=a; y+=a; z+=a; return *this; }$/;"	f	class:FVPoint3D
operator +=	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator+=(const FVPoint4D<T_> &p) { x+=p.x; y+=p.y; z+=p.z; t+=p.t;return *this; }$/;"	f	class:FVPoint4D
operator +=	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator+=(const T_ &a) { x+=a; y+=a; z+=a; t+=a;return *this; }$/;"	f	class:FVPoint4D
operator +=	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator+=(const FVVect<T_> &x)$/;"	f	class:FVVect
operator +=	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator+=(const T_ &a)$/;"	f	class:FVVect
operator -	include/FVDenseM.h	/^FVDenseM<T_> operator-(const FVDenseM<T_> &aa, const FVDenseM<T_> &bb)$/;"	f
operator -	include/FVDenseM.h	/^FVDenseM<T_> operator-(const FVDenseM<T_> &aa,const T_ &val)$/;"	f
operator -	include/FVPoint1D.h	/^FVPoint1D<T_> operator- (const FVPoint1D<T_> &a) $/;"	f
operator -	include/FVPoint1D.h	/^FVPoint1D<T_> operator- (const FVPoint1D<T_> &a, const FVPoint1D<T_> &b) $/;"	f
operator -	include/FVPoint1D.h	/^FVPoint1D<T_> operator- (const FVPoint1D<T_> &a, const T_ &x) $/;"	f
operator -	include/FVPoint2D.h	/^FVPoint2D<T_> operator- (const FVPoint2D<T_> &a) $/;"	f
operator -	include/FVPoint2D.h	/^FVPoint2D<T_> operator- (const FVPoint2D<T_> &a, const FVPoint2D<T_> &b) $/;"	f
operator -	include/FVPoint2D.h	/^FVPoint2D<T_> operator- (const FVPoint2D<T_> &a, const T_ &x) $/;"	f
operator -	include/FVPoint3D.h	/^FVPoint3D<T_> operator- (const FVPoint3D<T_> &a) $/;"	f
operator -	include/FVPoint3D.h	/^FVPoint3D<T_> operator- (const FVPoint3D<T_> &a, const FVPoint3D<T_> &b) $/;"	f
operator -	include/FVPoint3D.h	/^FVPoint3D<T_> operator- (const FVPoint3D<T_> &a, const T_ &x) $/;"	f
operator -	include/FVPoint4D.h	/^FVPoint4D<T_> operator- (const FVPoint4D<T_> &a) $/;"	f
operator -	include/FVPoint4D.h	/^FVPoint4D<T_> operator- (const FVPoint4D<T_> &a, const FVPoint4D<T_> &b) $/;"	f
operator -	include/FVPoint4D.h	/^FVPoint4D<T_> operator- (const FVPoint4D<T_> &a, const T_ &x) $/;"	f
operator -	include/FVVect.h	/^FVVect<T_> operator-(const FVVect<T_> &x, const FVVect<T_> &y)$/;"	f
operator -=	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator-=(const FVDenseM<T_> &m)$/;"	f	class:FVDenseM
operator -=	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator-=(const T_ &val)$/;"	f	class:FVDenseM
operator -=	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator-=(const FVPoint1D<T_> &p) { x-=p.x;   return *this; }$/;"	f	class:FVPoint1D
operator -=	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator-=(const T_ &a) { x-=a;  return *this; }$/;"	f	class:FVPoint1D
operator -=	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator-=(const FVPoint2D<T_> &p) { x-=p.x; y-=p.y;  return *this; }$/;"	f	class:FVPoint2D
operator -=	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator-=(const T_ &a) { x-=a; y-=a;  return *this; }$/;"	f	class:FVPoint2D
operator -=	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator-=(const FVPoint3D<T_> &p) { x-=p.x; y-=p.y; z-=p.z; return *this; }$/;"	f	class:FVPoint3D
operator -=	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator-=(const T_ &a) { x-=a; y-=a; z-=a; return *this; }$/;"	f	class:FVPoint3D
operator -=	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator-=(const FVPoint4D<T_> &p) { x-=p.x; y-=p.y; z-=p.z; t-=p.t;return *this; }$/;"	f	class:FVPoint4D
operator -=	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator-=(const T_ &a) { x-=a; y-=a; z-=a; t-=a;return *this; }$/;"	f	class:FVPoint4D
operator -=	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator-=(const FVVect<T_> &x)$/;"	f	class:FVVect
operator -=	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator-=(const T_ &a)$/;"	f	class:FVVect
operator /	include/FVDenseM.h	/^FVDenseM<T_> operator\/(const FVDenseM<T_> &aa,const T_ &val)$/;"	f
operator /	include/FVPoint1D.h	/^FVPoint1D<T_> operator\/ (const FVPoint1D<T_> &b, const T_ &x) $/;"	f
operator /	include/FVPoint2D.h	/^FVPoint2D<T_> operator\/ (const FVPoint2D<T_> &b, const T_ &x) $/;"	f
operator /	include/FVPoint3D.h	/^FVPoint3D<T_> operator\/ (const FVPoint3D<T_> &b, const T_ &a) $/;"	f
operator /	include/FVPoint4D.h	/^FVPoint4D<T_> operator\/ (const FVPoint4D<T_> &b, const T_ &a) $/;"	f
operator /=	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator\/=(const T_ &val)$/;"	f	class:FVDenseM
operator /=	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator\/=(const T_ &a) { x\/=a;  return *this; }$/;"	f	class:FVPoint1D
operator /=	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator\/=(const T_ &a) { x\/=a; y\/=a;  return *this; }$/;"	f	class:FVPoint2D
operator /=	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator\/=(const T_ &a) { x\/=a; y\/=a; z\/=a; return *this; }$/;"	f	class:FVPoint3D
operator /=	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator\/=(const T_ &a) { x\/=a; y\/=a; z\/=a; t\/=a;return *this; }$/;"	f	class:FVPoint4D
operator /=	include/FVSparseM.h	/^FVSparseM<T_> & FVSparseM<T_>::operator\/=(const T_ &val)$/;"	f	class:FVSparseM
operator /=	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator\/=(const T_ &a)$/;"	f	class:FVVect
operator <<	include/FVPoint1D.h	/^std::ostream & operator<<(std::ostream &s, const FVPoint1D<T_> &a)$/;"	f
operator <<	include/FVPoint2D.h	/^std::ostream & operator<<(std::ostream &s, const FVPoint2D<T_> &a)$/;"	f
operator <<	include/FVPoint3D.h	/^std::ostream & operator<<(std::ostream &s, const FVPoint3D<T_> &a)$/;"	f
operator <<	include/FVPoint4D.h	/^std::ostream & operator<<(std::ostream &s, const FVPoint4D<T_> &a)$/;"	f
operator =	include/FVDenseM.h	/^FVDenseM<T_> & FVDenseM<T_>::operator=(const T_ &val)$/;"	f	class:FVDenseM
operator =	include/FVPoint1D.h	/^    FVPoint1D<T_> & operator=(const T_ &a)  { x = a; return *this; }$/;"	f	class:FVPoint1D
operator =	include/FVPoint2D.h	/^    FVPoint2D<T_> & operator=(const T_ &a)  { x = y = a; return *this; }$/;"	f	class:FVPoint2D
operator =	include/FVPoint3D.h	/^    FVPoint3D<T_> & operator=(const T_ &a)  { x = y = z = a; return *this; }$/;"	f	class:FVPoint3D
operator =	include/FVPoint4D.h	/^    FVPoint4D<T_> & operator=(const T_ &a)  { x = y = z = t = a; return *this; }$/;"	f	class:FVPoint4D
operator =	include/FVVect.h	/^FVVect<T_> &FVVect<T_>::operator=(const T_ &a)$/;"	f	class:FVVect
perimeter	include/FVCell2D.h	/^double perimeter,area;$/;"	m	class:FVCell2D
perimeter	include/FVFace3D.h	/^double perimeter,area;$/;"	m	class:FVFace3D
pos	include/FVSparseM.h	/^    size_t pos;$/;"	m	class:SparseNode
pos	include/FVVect.h	/^size_t  pos;$/;"	m	class:FVVect
pos_bound_e	include/FVMesh2D.h	/^    size_t pos_v,pos_c,pos_e,pos_bound_e;$/;"	m	class:FVMesh2D
pos_bound_f	include/FVMesh3D.h	/^    size_t pos_v,pos_c,pos_e,pos_f,pos_bound_f;$/;"	m	class:FVMesh3D
pos_bound_v	include/FVMesh1D.h	/^    size_t pos_v,pos_c,pos_bound_v;$/;"	m	class:FVMesh1D
pos_c	include/FVMesh1D.h	/^    size_t pos_v,pos_c,pos_bound_v;$/;"	m	class:FVMesh1D
pos_c	include/FVMesh2D.h	/^    size_t pos_v,pos_c,pos_e,pos_bound_e;$/;"	m	class:FVMesh2D
pos_c	include/FVMesh3D.h	/^    size_t pos_v,pos_c,pos_e,pos_f,pos_bound_f;$/;"	m	class:FVMesh3D
pos_c	include/FVVertex2D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex2D
pos_c	include/FVVertex3D.h	/^size_t label, code, nb_cell,pos_c;$/;"	m	class:FVVertex3D
pos_e	include/FVCell2D.h	/^size_t pos_e,pos_v;$/;"	m	class:FVCell2D
pos_e	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
pos_e	include/FVMesh2D.h	/^    size_t pos_v,pos_c,pos_e,pos_bound_e;$/;"	m	class:FVMesh2D
pos_e	include/FVMesh3D.h	/^    size_t pos_v,pos_c,pos_e,pos_f,pos_bound_f;$/;"	m	class:FVMesh3D
pos_f	include/FVCell3D.h	/^size_t pos_f,pos_v;$/;"	m	class:FVCell3D
pos_f	include/FVMesh3D.h	/^    size_t pos_v,pos_c,pos_e,pos_f,pos_bound_f;$/;"	m	class:FVMesh3D
pos_v	include/FVCell2D.h	/^size_t pos_e,pos_v;$/;"	m	class:FVCell2D
pos_v	include/FVCell3D.h	/^size_t pos_f,pos_v;$/;"	m	class:FVCell3D
pos_v	include/FVFace3D.h	/^size_t label, code,nb_vertex,nb_edge,nb_cell,pos_e,pos_v;$/;"	m	class:FVFace3D
pos_v	include/FVMesh1D.h	/^    size_t pos_v,pos_c,pos_bound_v;$/;"	m	class:FVMesh1D
pos_v	include/FVMesh2D.h	/^    size_t pos_v,pos_c,pos_e,pos_bound_e;$/;"	m	class:FVMesh2D
pos_v	include/FVMesh3D.h	/^    size_t pos_v,pos_c,pos_e,pos_f,pos_bound_f;$/;"	m	class:FVMesh3D
printArray	include/Table.h	/^void printArray()$/;"	f	class:Table
resize	include/FVDenseM.h	/^void FVDenseM<T_>::resize(size_t nr, size_t nc)$/;"	f	class:FVDenseM
resize	include/FVDenseM.h	/^void FVDenseM<T_>::resize(size_t size)$/;"	f	class:FVDenseM
resize	include/FVSparseM.h	/^void FVSparseM<T_>::resize(size_t nr, size_t nc)$/;"	f	class:FVSparseM
resize	include/FVSparseM.h	/^void FVSparseM<T_>::resize(size_t size)$/;"	f	class:FVSparseM
resizeAndsetValue	include/FVSparseM.h	/^void FVSparseM<T_>::resizeAndsetValue(size_t i, size_t j, const T_ &val)    $/;"	f	class:FVSparseM
rightCell	include/FVEdge2D.h	/^FVCell2D *leftCell,*rightCell;  \/\/ the two cells$/;"	m	class:FVEdge2D
rightCell	include/FVFace3D.h	/^FVCell3D *leftCell,*rightCell;  \/\/ the two cells$/;"	m	class:FVFace3D
rightCell	include/FVVertex1D.h	/^FVCell1D *leftCell,*rightCell;$/;"	m	class:FVVertex1D
row	include/FVSparseM.h	/^std::vector<Tab_index *> row,col; \/\/ index table$/;"	m	class:FVSparseM
row_perm	include/FVDenseM.h	/^valarray<size_t> row_perm; \/\/ the row permutation index vector for the LU factorization$/;"	m	class:FVDenseM
secondVertex	include/FVCell1D.h	/^FVVertex1D *firstVertex,*secondVertex; \/\/ the two vertices$/;"	m	class:FVCell1D
secondVertex	include/FVEdge2D.h	/^FVVertex2D *firstVertex,*secondVertex; \/\/ the two vertices$/;"	m	class:FVEdge2D
secondVertex	include/FVEdge3D.h	/^FVVertex3D *firstVertex,*secondVertex; \/\/ the two vertices$/;"	m	class:FVEdge3D
second_normal	include/FVCell1D.h	/^FVPoint1D<double> first_normal,second_normal; \/\/ normal exterior$/;"	m	class:FVCell1D
setCode2Edge	include/FVCell2D.h	/^     void setCode2Edge(size_t val=0)$/;"	f	class:FVCell2D
setCode2Edge	include/FVCell3D.h	/^     void setCode2Edge(size_t val=0)$/;"	f	class:FVCell3D
setCode2Edge	include/FVFace3D.h	/^     void setCode2Edge(size_t val=0)$/;"	f	class:FVFace3D
setCode2Face	include/FVCell3D.h	/^     void setCode2Face(size_t val=0)$/;"	f	class:FVCell3D
setCode2Vertex	include/FVCell1D.h	/^    void setCode2Vertex(size_t val=0)$/;"	f	class:FVCell1D
setCode2Vertex	include/FVCell2D.h	/^     void setCode2Vertex(size_t val=0)$/;"	f	class:FVCell2D
setCode2Vertex	include/FVCell3D.h	/^     void setCode2Vertex(size_t val=0)$/;"	f	class:FVCell3D
setCode2Vertex	include/FVEdge2D.h	/^    void setCode2Vertex(size_t val=0)$/;"	f	class:FVEdge2D
setCode2Vertex	include/FVEdge3D.h	/^void setCode2Vertex(size_t val=0)$/;"	f	class:FVEdge3D
setCode2Vertex	include/FVFace3D.h	/^     void setCode2Vertex(size_t val=0)$/;"	f	class:FVFace3D
setColumn	include/FVDenseM.h	/^void FVDenseM<T_>::setColumn(size_t j, const FVVect<T_> &column) $/;"	f	class:FVDenseM
setLine	include/FVDenseM.h	/^void FVDenseM<T_>::setLine(size_t i, const FVVect<T_> &line) $/;"	f	class:FVDenseM
setName	include/FVMesh1D.h	/^     void setName(const char * name){_name=name;}     $/;"	f	class:FVMesh1D
setName	include/FVMesh2D.h	/^     void setName(const char * name){_name=name;}   $/;"	f	class:FVMesh2D
setName	include/FVMesh3D.h	/^     void setName(const char * name){_name=name;}   $/;"	f	class:FVMesh3D
setName	include/FVio.h	/^    void setName(string &name){_name=name;} $/;"	f	class:FVio
setPolynomialDegree	include/FVRecons1D.h	/^void setPolynomialDegree(size_t degree){_degree=degree;_Ncoef=_degree;}    $/;"	f	class:FVRecons1D
setPolynomialDegree	include/FVRecons2D.h	/^void setPolynomialDegree(size_t degree){_degree=degree;_Ncoef=((_degree+2)*(_degree+1))\/2-1;}    $/;"	f	class:FVRecons2D
setPolynomialDegree	include/FVRecons3D.h	/^void setPolynomialDegree(size_t degree){_degree=degree;_Ncoef=((_degree+3)*(_degree)*(_degree+1))\/6-1;}    $/;"	f	class:FVRecons3D
setReferencePoint	include/FVRecons1D.h	/^void setReferencePoint(FVPoint1D<double> P){_ref_point=P;}$/;"	f	class:FVRecons1D
setReferencePoint	include/FVRecons1D.h	/^void setReferencePoint(double x){_ref_point.x=x;}$/;"	f	class:FVRecons1D
setReferencePoint	include/FVRecons2D.h	/^void setReferencePoint(FVPoint2D<double> P){_ref_point=P;}$/;"	f	class:FVRecons2D
setReferencePoint	include/FVRecons3D.h	/^void setReferencePoint(FVPoint3D<double> P){_ref_point=P;}$/;"	f	class:FVRecons3D
setStencil	include/FVRecons1D.h	/^void setStencil(FVStencil &st){ FVRecons1D::setStencil(&st); }      $/;"	f	class:FVRecons1D
setStencil	include/FVRecons1D.h	/^void setStencil(FVStencil &st, size_t degree){ FVRecons1D::setStencil(&st,degree); }      $/;"	f	class:FVRecons1D
setStencil	include/FVRecons1D.h	/^void setStencil(FVStencil *ptr_s)$/;"	f	class:FVRecons1D
setStencil	include/FVRecons1D.h	/^void setStencil(FVStencil *ptr_s, size_t degree)$/;"	f	class:FVRecons1D
setStencil	include/FVRecons2D.h	/^void setStencil(FVStencil &st){ FVRecons2D::setStencil(&st); }      $/;"	f	class:FVRecons2D
setStencil	include/FVRecons2D.h	/^void setStencil(FVStencil &st, size_t degree){ FVRecons2D::setStencil(&st,degree); }      $/;"	f	class:FVRecons2D
setStencil	include/FVRecons2D.h	/^void setStencil(FVStencil *ptr_s)$/;"	f	class:FVRecons2D
setStencil	include/FVRecons2D.h	/^void setStencil(FVStencil *ptr_s, size_t degree)$/;"	f	class:FVRecons2D
setStencil	include/FVRecons3D.h	/^void setStencil(FVStencil &st){ FVRecons3D::setStencil(&st); }     $/;"	f	class:FVRecons3D
setStencil	include/FVRecons3D.h	/^void setStencil(FVStencil &st, size_t degree){ FVRecons3D::setStencil(&st,degree); }      $/;"	f	class:FVRecons3D
setStencil	include/FVRecons3D.h	/^void setStencil(FVStencil *ptr_s)$/;"	f	class:FVRecons3D
setStencil	include/FVRecons3D.h	/^void setStencil(FVStencil *ptr_s, size_t degree)$/;"	f	class:FVRecons3D
setTime	include/FVio.h	/^    void setTime(double &time){_time=time;}$/;"	f	class:FVio
setValue	include/FVDenseM.h	/^void FVDenseM<T_>::setValue(size_t i, size_t j, const T_ &val) $/;"	f	class:FVDenseM
setValue	include/FVSparseM.h	/^void FVSparseM<T_>::setValue(size_t i, size_t j, const T_ &val)$/;"	f	class:FVSparseM
setVectorCell1D	include/FVRecons1D.h	/^void setVectorCell1D( FVVect<double> & u){_Cell1DVect=&u;}$/;"	f	class:FVRecons1D
setVectorCell2D	include/FVRecons2D.h	/^void setVectorCell2D( FVVect<double> & u)  {_Cell2DVect=&u;}$/;"	f	class:FVRecons2D
setVectorCell3D	include/FVRecons3D.h	/^void setVectorCell3D( FVVect<double> & u){_Cell3DVect=&u;}$/;"	f	class:FVRecons3D
setVectorEdge2D	include/FVRecons2D.h	/^void setVectorEdge2D( FVVect<double> & u)  {_Edge2DVect=&u;}$/;"	f	class:FVRecons2D
setVectorEdge3D	include/FVRecons3D.h	/^void setVectorEdge3D( FVVect<double> & u){_Edge3DVect=&u;}$/;"	f	class:FVRecons3D
setVectorFace3D	include/FVRecons3D.h	/^void setVectorFace3D( FVVect<double> & u){_Face3DVect=&u;}$/;"	f	class:FVRecons3D
setVectorVertex1D	include/FVRecons1D.h	/^void setVectorVertex1D( FVVect<double> & u){_Vertex1DVect=&u;}$/;"	f	class:FVRecons1D
setVectorVertex2D	include/FVRecons2D.h	/^void setVectorVertex2D( FVVect<double> & u){_Vertex2DVect=&u;}$/;"	f	class:FVRecons2D
setVectorVertex3D	include/FVRecons3D.h	/^void setVectorVertex3D( FVVect<double> & u){_Vertex3DVect=&u;}$/;"	f	class:FVRecons3D
show	include/FVDenseM.h	/^void FVDenseM<T_>::show()$/;"	f	class:FVDenseM
show	include/FVPoint1D.h	/^    void show()$/;"	f	class:FVPoint1D
show	include/FVPoint2D.h	/^    void show()$/;"	f	class:FVPoint2D
show	include/FVPoint3D.h	/^    void show()$/;"	f	class:FVPoint3D
show	include/FVPoint4D.h	/^    void show()$/;"	f	class:FVPoint4D
show	include/FVSparseM.h	/^void FVSparseM<T_>::show()$/;"	f	class:FVSparseM
show	include/FVVect.h	/^void FVVect<T_>::show()$/;"	f	class:FVVect
show	include/Gmsh.h	/^void show()$/;"	f	class:GMElement
showXML	include/FVio.h	/^    void showXML(){cout << _xml<<endl;}  \/\/ for internal purpose to check the string$/;"	f	class:FVio
surface	include/FVCell3D.h	/^double surface,volume;$/;"	m	class:FVCell3D
t	include/FVPoint4D.h	/^T_ x,y,z,t;$/;"	m	class:FVPoint4D
type_element	include/Gmsh.h	/^size_t label,type_element,code_physical, code_elementary,nb_node,dim;$/;"	m	class:GMElement
vertex	include/FVCell2D.h	/^FVVertex2D* vertex[NB_VERTEX_PER_CELL_2D] ; \/\/ the  vertices$/;"	m	class:FVCell2D
vertex	include/FVCell3D.h	/^FVVertex3D* vertex[NB_VERTEX_PER_CELL_3D] ; \/\/ the  vertices$/;"	m	class:FVCell3D
vertex	include/FVFace3D.h	/^FVVertex3D *vertex[NB_VERTEX_PER_FACE_3D]; \/\/ the vertices$/;"	m	class:FVFace3D
volume	include/FVCell3D.h	/^double surface,volume;$/;"	m	class:FVCell3D
x	include/FVPoint1D.h	/^T_ x;$/;"	m	class:FVPoint1D
x	include/FVPoint2D.h	/^T_ x,y;$/;"	m	class:FVPoint2D
x	include/FVPoint3D.h	/^T_ x,y,z;$/;"	m	class:FVPoint3D
x	include/FVPoint4D.h	/^T_ x,y,z,t;$/;"	m	class:FVPoint4D
y	include/FVPoint2D.h	/^T_ x,y;$/;"	m	class:FVPoint2D
y	include/FVPoint3D.h	/^T_ x,y,z;$/;"	m	class:FVPoint3D
y	include/FVPoint4D.h	/^T_ x,y,z,t;$/;"	m	class:FVPoint4D
z	include/FVPoint3D.h	/^T_ x,y,z;$/;"	m	class:FVPoint3D
z	include/FVPoint4D.h	/^T_ x,y,z,t;$/;"	m	class:FVPoint4D
~FVCell1D	include/FVCell1D.h	/^    ~FVCell1D(){;}  $/;"	f	class:FVCell1D
~FVCell2D	include/FVCell2D.h	/^    ~FVCell2D(){;}  $/;"	f	class:FVCell2D
~FVCell3D	include/FVCell3D.h	/^    ~FVCell3D(){;}  $/;"	f	class:FVCell3D
~FVEdge2D	include/FVEdge2D.h	/^    ~FVEdge2D(){;}  $/;"	f	class:FVEdge2D
~FVEdge3D	include/FVEdge3D.h	/^    ~FVEdge3D(){;} $/;"	f	class:FVEdge3D
~FVFace3D	include/FVFace3D.h	/^    ~FVFace3D(){;}$/;"	f	class:FVFace3D
~FVRecons1D	include/FVRecons1D.h	/^~FVRecons1D(){if(_A) delete(_A); if(_Q) delete(_Q);if(_coef) delete(_coef);if(_M) delete(_M);}  $/;"	f	class:FVRecons1D
~FVRecons2D	include/FVRecons2D.h	/^~FVRecons2D(){if(_A) delete(_A); if(_Q) delete(_Q);if(_coef) delete(_coef);if(_M) delete(_M); }     $/;"	f	class:FVRecons2D
~FVRecons3D	include/FVRecons3D.h	/^~FVRecons3D(){if(_A) delete(_A); if(_Q) delete(_Q);if(_coef) delete(_coef);if(_M) delete(_M);}  $/;"	f	class:FVRecons3D
~FVSparseM	include/FVSparseM.h	/^FVSparseM<T_>::~FVSparseM()$/;"	f	class:FVSparseM
~FVStencil	include/FVStencil.h	/^    ~FVStencil(){$/;"	f	class:FVStencil
~FVVertex1D	include/FVVertex1D.h	/^    ~FVVertex1D(){;}  $/;"	f	class:FVVertex1D
~FVVertex2D	include/FVVertex2D.h	/^    ~FVVertex2D(){;}  $/;"	f	class:FVVertex2D
~FVVertex3D	include/FVVertex3D.h	/^    ~FVVertex3D(){;}  $/;"	f	class:FVVertex3D
~Parameter	include/Parameter.h	/^~Parameter(){;}$/;"	f	class:Parameter
~SparseXML	include/XML.h	/^  ~SparseXML(){;}$/;"	f	class:SparseXML
~Table	include/Table.h	/^~Table(){;}$/;"	f	class:Table
